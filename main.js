(()=>{"use strict";var n={689:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,'* {\n  box-sizing: border-box;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.game-areas {\n  display: flex;\n  gap: 2rem;\n}\n\n.gameboard {\n  display: grid;\n  width: max-content;\n  border: 0.1rem solid black;\n  background-color: white;\n}\n\n.square {\n  border: 0.05rem solid black;\n  position: relative;\n}\n\n.square.with-background-ship {\n  transform-style: preserve-3d;\n}\n\n.square.with-background-ship .ship {\n  transform: translateZ(-1px);\n}\n\n.square.legal-border {\n  background-color: green;\n}\n\n.square.error-border {\n  background-color: rgba(255, 0, 0, 0.5);\n}\n\n.ships {\n  display: grid;\n  justify-content: center;\n  grid-template-columns: repeat(3, max-content);\n  align-items: center;\n  gap: 1rem;\n}\n\n.ship {\n  position: relative;\n  grid-column-end: span 1;\n  display: grid;\n  z-index: 1;\n}\n\n.ship.on-gameboard {\n  position: absolute;\n}\n\n.ship-square.full {\n  background-color: black;\n}\n\n.ship[data-orientation="0"] .ship-square.full {\n  grid-column: 1 / span 2;\n}\n\n.ship[data-orientation="1"] .ship-square.full {\n  grid-row: 1 / span 2;\n}\n\n.ship-square.top-left {\n  background-image: linear-gradient(to bottom right, transparent 50%, black 50%);\n  grid-column: 1;\n}\n\n.ship[data-orientation="1"] .ship-square.top-left {\n  grid-row: 1;\n}\n\n.ship-square.top-right {\n  background-image: linear-gradient(to bottom left, transparent 50%, black 50%);\n  grid-column: 2;\n}\n\n.ship[data-orientation="1"] .ship-square.top-right {\n  grid-column: -2;\n  grid-row: 1;\n}\n\n.ship-square.bottom-left {\n  background-image: linear-gradient(to bottom left, black 50%, transparent 50%);\n  grid-column: 1;\n}\n\n.ship[data-orientation="1"] .ship-square.bottom-left {\n  grid-row: 2;\n}\n\n.ship-square.bottom-right {\n  background-image: linear-gradient(to bottom right, black 50%, transparent 50%);\n  grid-column: 2;\n}\n\n.ship[data-orientation="1"] .ship-square.bottom-right {\n  grid-column: -2;\n  grid-row: 2;\n}\n\n.ship button.rotate {\n  grid-row: 1;\n  grid-column: 3 / span 2;\n  justify-self: center;\n  align-self: center;\n}\n\n.ship[data-orientation="1"] button.rotate {\n  grid-row: 3 / span 2;\n  grid-column: 1;\n}\n\n.disabled * {\n  color: gray;\n  border-color: lightgray;\n}\n',"",{version:3,sources:["webpack://./src/styles/all.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,0BAA0B;EAC1B,uBAAuB;AACzB;;AAEA;EACE,2BAA2B;EAC3B,kBAAkB;AACpB;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,sCAAsC;AACxC;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,6CAA6C;EAC7C,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;EACvB,aAAa;EACb,UAAU;AACZ;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,8EAA8E;EAC9E,cAAc;AAChB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,6EAA6E;EAC7E,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,WAAW;AACb;;AAEA;EACE,6EAA6E;EAC7E,cAAc;AAChB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,8EAA8E;EAC9E,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,WAAW;AACb;;AAEA;EACE,WAAW;EACX,uBAAuB;EACvB,oBAAoB;EACpB,kBAAkB;AACpB;;AAEA;EACE,oBAAoB;EACpB,cAAc;AAChB;;AAEA;EACE,WAAW;EACX,uBAAuB;AACzB",sourcesContent:['* {\n  box-sizing: border-box;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.game-areas {\n  display: flex;\n  gap: 2rem;\n}\n\n.gameboard {\n  display: grid;\n  width: max-content;\n  border: 0.1rem solid black;\n  background-color: white;\n}\n\n.square {\n  border: 0.05rem solid black;\n  position: relative;\n}\n\n.square.with-background-ship {\n  transform-style: preserve-3d;\n}\n\n.square.with-background-ship .ship {\n  transform: translateZ(-1px);\n}\n\n.square.legal-border {\n  background-color: green;\n}\n\n.square.error-border {\n  background-color: rgba(255, 0, 0, 0.5);\n}\n\n.ships {\n  display: grid;\n  justify-content: center;\n  grid-template-columns: repeat(3, max-content);\n  align-items: center;\n  gap: 1rem;\n}\n\n.ship {\n  position: relative;\n  grid-column-end: span 1;\n  display: grid;\n  z-index: 1;\n}\n\n.ship.on-gameboard {\n  position: absolute;\n}\n\n.ship-square.full {\n  background-color: black;\n}\n\n.ship[data-orientation="0"] .ship-square.full {\n  grid-column: 1 / span 2;\n}\n\n.ship[data-orientation="1"] .ship-square.full {\n  grid-row: 1 / span 2;\n}\n\n.ship-square.top-left {\n  background-image: linear-gradient(to bottom right, transparent 50%, black 50%);\n  grid-column: 1;\n}\n\n.ship[data-orientation="1"] .ship-square.top-left {\n  grid-row: 1;\n}\n\n.ship-square.top-right {\n  background-image: linear-gradient(to bottom left, transparent 50%, black 50%);\n  grid-column: 2;\n}\n\n.ship[data-orientation="1"] .ship-square.top-right {\n  grid-column: -2;\n  grid-row: 1;\n}\n\n.ship-square.bottom-left {\n  background-image: linear-gradient(to bottom left, black 50%, transparent 50%);\n  grid-column: 1;\n}\n\n.ship[data-orientation="1"] .ship-square.bottom-left {\n  grid-row: 2;\n}\n\n.ship-square.bottom-right {\n  background-image: linear-gradient(to bottom right, black 50%, transparent 50%);\n  grid-column: 2;\n}\n\n.ship[data-orientation="1"] .ship-square.bottom-right {\n  grid-column: -2;\n  grid-row: 2;\n}\n\n.ship button.rotate {\n  grid-row: 1;\n  grid-column: 3 / span 2;\n  justify-self: center;\n  align-self: center;\n}\n\n.ship[data-orientation="1"] button.rotate {\n  grid-row: 3 / span 2;\n  grid-column: 1;\n}\n\n.disabled * {\n  color: gray;\n  border-color: lightgray;\n}\n'],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var u=[].concat(n[d]);r&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),e.push(u))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var c=n[s],d=r.base?c[0]+r.base:c[0],u=o[d]||0,l="".concat(d," ").concat(u);o[d]=u+1;var p=t(l),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(A);else{var m=a(A,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=t(o[i]);e[s].references--}for(var c=r(n,a),d=0;d<o.length;d++){var u=t(o[d]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{const n=document.querySelectorAll("main > section"),e=document.querySelector("section.mode-selection"),r=document.querySelectorAll(".mode-selection button"),a=document.querySelector("section.player-set-up"),o=document.querySelector("section.player-set-up form"),i=document.querySelector("section.game"),s=document.querySelector(".game .message"),c=document.querySelectorAll(".game .game-area"),d=document.querySelectorAll(".game .gameboard-label"),u=document.querySelectorAll(".game .gameboard"),l=()=>document.querySelectorAll(".game .gameboard .square"),p=document.querySelectorAll(".game .ships");function A(){n.forEach((n=>n.classList.add("hidden")))}function m(n,e){return`<div class="field">\n    <label for="player-${n}-name">Player${e?` ${n+1}`:""} Name</label>\n    <input type="text" name="player-${n}-name" id="player-${n}-name">\n  </div>`}const h=[5,4,3,3,2];function g(n){n.dataset.orientation=1-Number(n.dataset.orientation),n.style.gridTemplate=n.style.gridTemplate.split(" / ").reverse().join(" / ")}function f([n,e],t,r,a,o){const i=[[-1,0],[r,0]];for(let n=-1;n<=r;n+=1)i.push([n,-1],[n,1]);i.map((r=>{const[a,o]=t?r.reverse():r;return[n+a,e+o]})).filter((n=>n.every((n=>n>=0&&n<10)))).forEach((([n,e])=>{const t=10*n+e;u[a].querySelector(`.square[data-index="${t}"]`).classList.add((o?"legal":"error")+"-border")}))}function b(){l().forEach((n=>{n.classList.remove("legal-border","error-border")}))}function E(n){return n[0].toUpperCase()+n.slice(1)}function y(n,e){return e.some((e=>e.every(((e,t)=>e===n[t]))))}function v(n){return{length:n}}function C(n,e){let t=e;return{hit:function(){t+=1},isSunk:function(){return n===t}}}function B(n,e,t=1/0){function r(n=this.position){const t=[];if(void 0===n||void 0===this.orientation)return t;const r=this.orientation;for(let a=0;a<this[e].length;a+=1){const e=[...n];e[r]+=a,t.push(e)}return t}function a(e,t){return n[e].area(t).every((t=>!y(t,function({excluding:e}={}){return n.reduce(((n,t,r)=>{if(!t.position||e.includes(r))return n;const a=t.area();return[...n,...a,...(o=a,o.reduce(((n,[e,t])=>[...n,...[[1,0],[-1,0],[0,1],[0,-1],[1,1],[1,-1],[-1,1],[-1,1]].map((([n,r])=>[e+n,t+r])).filter((n=>!y(n,o)))]),[]))];var o}),[])}({excluding:[e]}))))}function o(r,o){const i=n[r],s=function(n,r){const a=[t-r[e].length,t-1],o=0===r.orientation?a:[...a].reverse();return n.map(((n,e)=>Math.max(0,Math.min(o[e],n))))}(o,i);if(!a(r,s))throw new Error("This position is illegal!");return i.position=s,i.position}function i(e){const t=n[e];if(t.orientation=1-t.orientation,t.position)try{o(e,t.position)}catch(n){throw i(e),n}return t.orientation}n.forEach((n=>Object.assign(n,{orientation:0,area:r})));const s=E(e);return{[`place${s}`]:o,[`legal${s}Placement`]:a,[`all${s}sPlaced`]:function(){return n.every((n=>n.position))},[`rotate${s}`]:i,[`autoPlace${s}s`]:function(){n.forEach(((n,e)=>{for(Math.floor(2*Math.random())&&i(e);!n.position;)try{o(e,[...new Array(2)].map((()=>Math.floor(Math.random()*t))))}catch{}}))}}}function k(n,e,t,{moveable:r=!1,allMethodNames:a=[]}={}){const o=n.map((n=>({[e]:t(n)}))),i=a.reduce(((n,t)=>{const r=E(t);return{...n,[`all${r}`]:function(){return o.every((n=>n[e][`is${r}`]()))}}}),{});return{[`${e}s`]:o,...i,...r?B(o,e,r.areaLength||1/0):{}}}function q(n){return{name:n,setName:function(n){this.name=n}}}function x(n,{attackItemName:e}={}){return{attacks:n,receiveAttack:function(t){n.push(t),e&&function(n,t){n.forEach((n=>{y(t,n.area())&&n[e].hit()}))}(this[`${e}s`],t)}}}function w(){function n(n){return[...new Array(2)].map((()=>Math.floor(Math.random()*n.length)))}return{autoAttack:function(e){let t=n(e);for(;y(t,e.attacks||[]);)t=n(e);this.attack(e,t)}}}function L({auto:n=!1}={}){return{attack:function(n,e){if(y(e,n.attacks||[]))throw new Error("That position has already been attacked!");n.receiveAttack(e)},...n?w():{}}}function S({method:n=""}={}){return{takeTurn:function(e){return!!n&&(this[n](e),!0)}}}function M({length:n=2,hits:e=0}={}){return{type:"Ship",...v(n),...C(n,e)}}function N(n="Player"){return{type:"humanPlayer",...q(n),...L(),...S()}}const $={modes:{playerMode:0},players:[],gameboards:[],currPlayerIndex:0,gameOver:!1};function I({playerMode:n=0,gameboardLength:e=10,shipLengths:t=[5,4,3,3,2]}={}){!function(n){const e={...n};Object.keys(e).forEach((n=>{e[n]=Number(e[n])})),$.modes=e}({playerMode:n}),function(){if($.modes.playerMode)$.players=[...new Array(2)].map((()=>N()));else{$.players=[];const n=Math.floor(2*Math.random());$.players[n]=N(),$.players[1-n]={type:"computerPlayer",...q("Computer"),...L({auto:!0}),...S({method:"autoAttack"})}}}(),function(n,e){if($.gameboards=[...new Array(2)].map((()=>function({shipLengths:n=[5,4,3,3,2],length:e=10,attacks:t=[]}={}){return{type:"Gameboard",...v(e),...k(n.map((n=>v(n))),"ship",M,{moveable:{areaLength:e},allMethodNames:["sunk"]}),...x(t,{attackItemName:"ship"})}}({length:n,shipLengths:e}))),$.modes.playerMode)return;const t=$.players.findIndex((n=>"computerPlayer"===n.type));$.gameboards[t].autoPlaceShips()}(e,t),$.currPlayerIndex=0,$.gameOver=!1}function T(){A(),i.classList.remove("hidden"),function(n){d.forEach(((e,t)=>{e.textContent=`${n[t]}'s Shipyard`}));const e=Math.min(window.innerHeight,window.innerWidth)/22.5;!function(n,e){u.forEach((e=>{e.style.display="grid",e.style.gridTemplate=`repeat(10, ${n}px) / repeat(10, ${n}px)`;for(let n=0;n<100;n+=1)e.insertAdjacentHTML("beforeend",`<div class="square" data-index="${n}"></div>`)}))}(e),function(n){p.forEach(((e,t)=>{h.forEach(((r,a)=>{e.insertAdjacentHTML("beforeend",function(n,e,t,r){let a=`<div style="display: grid; grid-template: repeat(${e}, ${n}px) / repeat(4, ${n/2}px);" class="ship" data-game-area-index="${r}" data-index="${t}" data-square-length="${n}" data-orientation="0" draggable="true">`;for(let n=0;n<e;n+=1)0===n?(a+='<div class="ship-square top-left"></div>',a+='<div class="ship-square top-right"></div>'):n===e-1?(a+='<div class="ship-square bottom-left"></div>',a+='<div class="ship-square bottom-right"></div>'):a+='<div class="ship-square full"></div>';return a+='<button class="rotate">R</button></div>',a}(n,r,a,t))}))}))}(e)}($.players.map((n=>n.name))),function(){const n=[...l()].map((n=>({square:n,position:[Math.floor(n.dataset.index/10),n.dataset.index%10],gameAreaIndex:Number(n.closest(".game-area").dataset.index)})));function e(e,t=Number(e.dataset.gameAreaIndex),r=$.gameboards[t].ships[Number(e.dataset.index)].position){e.classList.add("on-gameboard"),n.find((({position:n,gameAreaIndex:e})=>{return t===e&&(a=n,r.every(((n,e)=>a[e]===n)));var a})).square.appendChild(e)}function t(n){const t=n.target.closest(".ship"),[r,a]=["gameAreaIndex","index"].map((n=>Number(t.dataset[n]))),o=$.gameboards[r].ships[a].position;try{$.gameboards[r].rotateShip(a)}catch{return void function(n,e){g(n),f(e,Number(n.dataset.orientation),h[Number(n.dataset.index)],Number(n.dataset.gameAreaIndex),!1),setTimeout((()=>{g(n),b()}),500)}(t,o)}o&&e(t),g(t)}!function(){let t;n.forEach((({square:n,position:r,gameAreaIndex:a})=>{n.addEventListener("dragover",(function(n){if(n.preventDefault(),n.dataTransfer.dropEffect="move",Number(t.dataset.gameAreaIndex)!==a)return;const e=Number(t.dataset.index),o=Number(t.dataset.orientation),i=$.gameboards[a].legalShipPlacement(e,r);f(r,o,h[e],a,i)})),n.addEventListener("dragleave",b),n.addEventListener("drop",(function(){if(Number(t.dataset.gameAreaIndex)!==a)return;const n=Number(t.dataset.index);try{$.gameboards[a].placeShip(n,r)}catch{return}e(t),$.gameboards[a].allShipsPlaced()&&console.log("show button")}))}));const r=document.querySelectorAll(".game .ship");r.forEach((n=>{n.addEventListener("drag",(function(){n.classList.add("hidden")})),n.addEventListener("dragstart",(function(e){t=n;const a=Number(n.dataset.squareLength)/2;e.dataTransfer.setDragImage(n,a,a),r.forEach((e=>{e!==n&&e.classList.contains("on-gameboard")&&e.closest(".square").classList.add("with-background-ship")}))})),n.addEventListener("dragend",(function(){n.classList.remove("hidden"),b(),r.forEach((n=>{n.closest(".square")?.classList?.remove("with-background-ship")}))}))}))}(),document.querySelectorAll(".ship button.rotate").forEach((n=>n.addEventListener("click",t)))}(),function(){const n=$.gameboards.findIndex((n=>!n.allShipsPlaced()));var e,t;e=n,c.forEach(((n,t)=>{const r=n.querySelectorAll(".ship");t!==e?(n.classList.add("disabled"),r.forEach((n=>n.classList.add("hidden")))):(n.classList.remove("disabled"),r.forEach((n=>n.classList.remove("hidden"))))})),t=$.players[n].name,s.textContent=`${t}, place your ships.`}()}function P(n){I({playerMode:Number(n.target.closest("button").dataset.mode),gameboardLength:10,shipLengths:h}),function(n){A(),a.classList.remove("hidden");for(let e=n;e>=0;e-=1)o.insertAdjacentHTML("afterBegin",m(e,n))}($.modes.playerMode)}window.addEventListener("load",(function(){A(),e.classList.remove("hidden")})),r.forEach((n=>n.addEventListener("click",P))),o.addEventListener("submit",(function(n){n.preventDefault();const e=[...n.target.querySelectorAll("input")].map((n=>n.value));let t=0;$.players.forEach((n=>{"humanPlayer"===n.type&&(n.setName(e[t]),t+=1)})),T()}));var j=t(379),W=t.n(j),z=t(795),O=t.n(z),R=t(569),U=t.n(R),Z=t(565),H=t.n(Z),D=t(216),X=t.n(D),F=t(589),J=t.n(F),_=t(689),G={};G.styleTagTransform=J(),G.setAttributes=H(),G.insert=U().bind(null,"head"),G.domAPI=O(),G.insertStyleElement=X(),W()(_.Z,G),_.Z&&_.Z.locals&&_.Z.locals})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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c291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvYWxsLmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy9kb20tZWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zY3JpcHRzL3ZpZXdzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy9zZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvdmlld3MtZ2FtZWJvYXJkLXNldHVwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy91dGlsaXRpZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zY3JpcHRzL2NvbXBvc2l0aW9uLXVuaXRzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy9zaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zY3JpcHRzL2dhbWUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zY3JpcHRzL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvZG9tLWV2ZW50cy1nYW1lYm9hcmQtc2V0dXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zY3JpcHRzL2RvbS1ldmVudHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvYWxsLmNzcz8xOGVjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKiB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4uaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuXFxuLmdhbWUtYXJlYXMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGdhcDogMnJlbTtcXG59XFxuXFxuLmdhbWVib2FyZCB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgd2lkdGg6IG1heC1jb250ZW50O1xcbiAgYm9yZGVyOiAwLjFyZW0gc29saWQgYmxhY2s7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLnNxdWFyZSB7XFxuICBib3JkZXI6IDAuMDVyZW0gc29saWQgYmxhY2s7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5zcXVhcmUud2l0aC1iYWNrZ3JvdW5kLXNoaXAge1xcbiAgdHJhbnNmb3JtLXN0eWxlOiBwcmVzZXJ2ZS0zZDtcXG59XFxuXFxuLnNxdWFyZS53aXRoLWJhY2tncm91bmQtc2hpcCAuc2hpcCB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooLTFweCk7XFxufVxcblxcbi5zcXVhcmUubGVnYWwtYm9yZGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xcbn1cXG5cXG4uc3F1YXJlLmVycm9yLWJvcmRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMCwgMCwgMC41KTtcXG59XFxuXFxuLnNoaXBzIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIG1heC1jb250ZW50KTtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDFyZW07XFxufVxcblxcbi5zaGlwIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGdyaWQtY29sdW1uLWVuZDogc3BhbiAxO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIHotaW5kZXg6IDE7XFxufVxcblxcbi5zaGlwLm9uLWdhbWVib2FyZCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcblxcbi5zaGlwLXNxdWFyZS5mdWxsIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcbn1cXG5cXG4uc2hpcFtkYXRhLW9yaWVudGF0aW9uPVxcXCIwXFxcIl0gLnNoaXAtc3F1YXJlLmZ1bGwge1xcbiAgZ3JpZC1jb2x1bW46IDEgLyBzcGFuIDI7XFxufVxcblxcbi5zaGlwW2RhdGEtb3JpZW50YXRpb249XFxcIjFcXFwiXSAuc2hpcC1zcXVhcmUuZnVsbCB7XFxuICBncmlkLXJvdzogMSAvIHNwYW4gMjtcXG59XFxuXFxuLnNoaXAtc3F1YXJlLnRvcC1sZWZ0IHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20gcmlnaHQsIHRyYW5zcGFyZW50IDUwJSwgYmxhY2sgNTAlKTtcXG4gIGdyaWQtY29sdW1uOiAxO1xcbn1cXG5cXG4uc2hpcFtkYXRhLW9yaWVudGF0aW9uPVxcXCIxXFxcIl0gLnNoaXAtc3F1YXJlLnRvcC1sZWZ0IHtcXG4gIGdyaWQtcm93OiAxO1xcbn1cXG5cXG4uc2hpcC1zcXVhcmUudG9wLXJpZ2h0IHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20gbGVmdCwgdHJhbnNwYXJlbnQgNTAlLCBibGFjayA1MCUpO1xcbiAgZ3JpZC1jb2x1bW46IDI7XFxufVxcblxcbi5zaGlwW2RhdGEtb3JpZW50YXRpb249XFxcIjFcXFwiXSAuc2hpcC1zcXVhcmUudG9wLXJpZ2h0IHtcXG4gIGdyaWQtY29sdW1uOiAtMjtcXG4gIGdyaWQtcm93OiAxO1xcbn1cXG5cXG4uc2hpcC1zcXVhcmUuYm90dG9tLWxlZnQge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSBsZWZ0LCBibGFjayA1MCUsIHRyYW5zcGFyZW50IDUwJSk7XFxuICBncmlkLWNvbHVtbjogMTtcXG59XFxuXFxuLnNoaXBbZGF0YS1vcmllbnRhdGlvbj1cXFwiMVxcXCJdIC5zaGlwLXNxdWFyZS5ib3R0b20tbGVmdCB7XFxuICBncmlkLXJvdzogMjtcXG59XFxuXFxuLnNoaXAtc3F1YXJlLmJvdHRvbS1yaWdodCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tIHJpZ2h0LCBibGFjayA1MCUsIHRyYW5zcGFyZW50IDUwJSk7XFxuICBncmlkLWNvbHVtbjogMjtcXG59XFxuXFxuLnNoaXBbZGF0YS1vcmllbnRhdGlvbj1cXFwiMVxcXCJdIC5zaGlwLXNxdWFyZS5ib3R0b20tcmlnaHQge1xcbiAgZ3JpZC1jb2x1bW46IC0yO1xcbiAgZ3JpZC1yb3c6IDI7XFxufVxcblxcbi5zaGlwIGJ1dHRvbi5yb3RhdGUge1xcbiAgZ3JpZC1yb3c6IDE7XFxuICBncmlkLWNvbHVtbjogMyAvIHNwYW4gMjtcXG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xcbn1cXG5cXG4uc2hpcFtkYXRhLW9yaWVudGF0aW9uPVxcXCIxXFxcIl0gYnV0dG9uLnJvdGF0ZSB7XFxuICBncmlkLXJvdzogMyAvIHNwYW4gMjtcXG4gIGdyaWQtY29sdW1uOiAxO1xcbn1cXG5cXG4uZGlzYWJsZWQgKiB7XFxuICBjb2xvcjogZ3JheTtcXG4gIGJvcmRlci1jb2xvcjogbGlnaHRncmF5O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL2FsbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSx3QkFBd0I7QUFDMUI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsU0FBUztBQUNYOztBQUVBO0VBQ0UsYUFBYTtFQUNiLGtCQUFrQjtFQUNsQiwwQkFBMEI7RUFDMUIsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsMkJBQTJCO0VBQzNCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLDRCQUE0QjtBQUM5Qjs7QUFFQTtFQUNFLDJCQUEyQjtBQUM3Qjs7QUFFQTtFQUNFLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLHNDQUFzQztBQUN4Qzs7QUFFQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsNkNBQTZDO0VBQzdDLG1CQUFtQjtFQUNuQixTQUFTO0FBQ1g7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsdUJBQXVCO0VBQ3ZCLGFBQWE7RUFDYixVQUFVO0FBQ1o7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSw4RUFBOEU7RUFDOUUsY0FBYztBQUNoQjs7QUFFQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTtFQUNFLDZFQUE2RTtFQUM3RSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLFdBQVc7QUFDYjs7QUFFQTtFQUNFLDZFQUE2RTtFQUM3RSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsOEVBQThFO0VBQzlFLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsV0FBVztBQUNiOztBQUVBO0VBQ0UsV0FBVztFQUNYLHVCQUF1QjtFQUN2QixvQkFBb0I7RUFDcEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0Usb0JBQW9CO0VBQ3BCLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsdUJBQXVCO0FBQ3pCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIioge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLmhpZGRlbiB7XFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxufVxcblxcbi5nYW1lLWFyZWFzIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBnYXA6IDJyZW07XFxufVxcblxcbi5nYW1lYm9hcmQge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIHdpZHRoOiBtYXgtY29udGVudDtcXG4gIGJvcmRlcjogMC4xcmVtIHNvbGlkIGJsYWNrO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxufVxcblxcbi5zcXVhcmUge1xcbiAgYm9yZGVyOiAwLjA1cmVtIHNvbGlkIGJsYWNrO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uc3F1YXJlLndpdGgtYmFja2dyb3VuZC1zaGlwIHtcXG4gIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XFxufVxcblxcbi5zcXVhcmUud2l0aC1iYWNrZ3JvdW5kLXNoaXAgLnNoaXAge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKC0xcHgpO1xcbn1cXG5cXG4uc3F1YXJlLmxlZ2FsLWJvcmRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcXG59XFxuXFxuLnNxdWFyZS5lcnJvci1ib3JkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDAsIDAsIDAuNSk7XFxufVxcblxcbi5zaGlwcyB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCBtYXgtY29udGVudCk7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAxcmVtO1xcbn1cXG5cXG4uc2hpcCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gMTtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICB6LWluZGV4OiAxO1xcbn1cXG5cXG4uc2hpcC5vbi1nYW1lYm9hcmQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG5cXG4uc2hpcC1zcXVhcmUuZnVsbCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG59XFxuXFxuLnNoaXBbZGF0YS1vcmllbnRhdGlvbj1cXFwiMFxcXCJdIC5zaGlwLXNxdWFyZS5mdWxsIHtcXG4gIGdyaWQtY29sdW1uOiAxIC8gc3BhbiAyO1xcbn1cXG5cXG4uc2hpcFtkYXRhLW9yaWVudGF0aW9uPVxcXCIxXFxcIl0gLnNoaXAtc3F1YXJlLmZ1bGwge1xcbiAgZ3JpZC1yb3c6IDEgLyBzcGFuIDI7XFxufVxcblxcbi5zaGlwLXNxdWFyZS50b3AtbGVmdCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tIHJpZ2h0LCB0cmFuc3BhcmVudCA1MCUsIGJsYWNrIDUwJSk7XFxuICBncmlkLWNvbHVtbjogMTtcXG59XFxuXFxuLnNoaXBbZGF0YS1vcmllbnRhdGlvbj1cXFwiMVxcXCJdIC5zaGlwLXNxdWFyZS50b3AtbGVmdCB7XFxuICBncmlkLXJvdzogMTtcXG59XFxuXFxuLnNoaXAtc3F1YXJlLnRvcC1yaWdodCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tIGxlZnQsIHRyYW5zcGFyZW50IDUwJSwgYmxhY2sgNTAlKTtcXG4gIGdyaWQtY29sdW1uOiAyO1xcbn1cXG5cXG4uc2hpcFtkYXRhLW9yaWVudGF0aW9uPVxcXCIxXFxcIl0gLnNoaXAtc3F1YXJlLnRvcC1yaWdodCB7XFxuICBncmlkLWNvbHVtbjogLTI7XFxuICBncmlkLXJvdzogMTtcXG59XFxuXFxuLnNoaXAtc3F1YXJlLmJvdHRvbS1sZWZ0IHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20gbGVmdCwgYmxhY2sgNTAlLCB0cmFuc3BhcmVudCA1MCUpO1xcbiAgZ3JpZC1jb2x1bW46IDE7XFxufVxcblxcbi5zaGlwW2RhdGEtb3JpZW50YXRpb249XFxcIjFcXFwiXSAuc2hpcC1zcXVhcmUuYm90dG9tLWxlZnQge1xcbiAgZ3JpZC1yb3c6IDI7XFxufVxcblxcbi5zaGlwLXNxdWFyZS5ib3R0b20tcmlnaHQge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSByaWdodCwgYmxhY2sgNTAlLCB0cmFuc3BhcmVudCA1MCUpO1xcbiAgZ3JpZC1jb2x1bW46IDI7XFxufVxcblxcbi5zaGlwW2RhdGEtb3JpZW50YXRpb249XFxcIjFcXFwiXSAuc2hpcC1zcXVhcmUuYm90dG9tLXJpZ2h0IHtcXG4gIGdyaWQtY29sdW1uOiAtMjtcXG4gIGdyaWQtcm93OiAyO1xcbn1cXG5cXG4uc2hpcCBidXR0b24ucm90YXRlIHtcXG4gIGdyaWQtcm93OiAxO1xcbiAgZ3JpZC1jb2x1bW46IDMgLyBzcGFuIDI7XFxuICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcXG59XFxuXFxuLnNoaXBbZGF0YS1vcmllbnRhdGlvbj1cXFwiMVxcXCJdIGJ1dHRvbi5yb3RhdGUge1xcbiAgZ3JpZC1yb3c6IDMgLyBzcGFuIDI7XFxuICBncmlkLWNvbHVtbjogMTtcXG59XFxuXFxuLmRpc2FibGVkICoge1xcbiAgY29sb3I6IGdyYXk7XFxuICBib3JkZXItY29sb3I6IGxpZ2h0Z3JheTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiZXhwb3J0IGNvbnN0IHZpZXdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbWFpbiA+IHNlY3Rpb24nKTtcblxuZXhwb3J0IGNvbnN0IG1vZGVTZWxlY3Rpb25WaWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgJ3NlY3Rpb24ubW9kZS1zZWxlY3Rpb24nXG4pO1xuZXhwb3J0IGNvbnN0IG1vZGVTZWxlY3Rpb25CdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgJy5tb2RlLXNlbGVjdGlvbiBidXR0b24nXG4pO1xuXG5leHBvcnQgY29uc3QgcGxheWVyU2V0VXBWaWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2VjdGlvbi5wbGF5ZXItc2V0LXVwJyk7XG5leHBvcnQgY29uc3QgcGxheWVyU2V0VXBGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgJ3NlY3Rpb24ucGxheWVyLXNldC11cCBmb3JtJ1xuKTtcblxuZXhwb3J0IGNvbnN0IGdhbWVWaWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2VjdGlvbi5nYW1lJyk7XG5leHBvcnQgY29uc3QgZ2FtZU1lc3NhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZSAubWVzc2FnZScpO1xuZXhwb3J0IGNvbnN0IGdhbWVBcmVhRGl2cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5nYW1lIC5nYW1lLWFyZWEnKTtcbmV4cG9ydCBjb25zdCBnYW1lYm9hcmRMYWJlbERpdnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAnLmdhbWUgLmdhbWVib2FyZC1sYWJlbCdcbik7XG5leHBvcnQgY29uc3QgZ2FtZWJvYXJkRGl2cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5nYW1lIC5nYW1lYm9hcmQnKTtcbmV4cG9ydCBjb25zdCBnYW1lYm9hcmRTcXVhcmVEaXZzID0gKCkgPT5cbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmdhbWUgLmdhbWVib2FyZCAuc3F1YXJlJyk7XG5leHBvcnQgY29uc3Qgc2hpcHNEaXZzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmdhbWUgLnNoaXBzJyk7XG5leHBvcnQgY29uc3Qgc2hpcERpdnMgPSAoKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ2FtZSAuc2hpcCcpO1xuZXhwb3J0IGNvbnN0IHNoaXBEaXYgPSAoZ2FtZUFyZWFJbmRleCwgc2hpcEluZGV4KSA9PlxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgIGAuZ2FtZSAuc2hpcFtkYXRhLWdhbWUtYXJlYS1pbmRleD1cIiR7Z2FtZUFyZWFJbmRleH1cIl1bZGF0YS1pbmRleD1cIiR7c2hpcEluZGV4fVwiXWBcbiAgKTtcbmV4cG9ydCBjb25zdCByb3RhdGVTaGlwQnV0dG9ucyA9ICgpID0+XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaGlwIGJ1dHRvbi5yb3RhdGUnKTtcbiIsImltcG9ydCAqIGFzIGRvbSBmcm9tICcuL2RvbS1lbGVtZW50cyc7XG5cbmZ1bmN0aW9uIGhpZGVBbGxWaWV3cygpIHtcbiAgZG9tLnZpZXdzLmZvckVhY2goKHZpZXcpID0+IHZpZXcuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9kZVNlbGVjdGlvblZpZXcoKSB7XG4gIGhpZGVBbGxWaWV3cygpO1xuICBkb20ubW9kZVNlbGVjdGlvblZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG59XG5cbmZ1bmN0aW9uIHBsYXllck5hbWVGaWVsZFRlbXBsYXRlKGksIHBsYXllck1heEluZGV4KSB7XG4gIHJldHVybiBgPGRpdiBjbGFzcz1cImZpZWxkXCI+XG4gICAgPGxhYmVsIGZvcj1cInBsYXllci0ke2l9LW5hbWVcIj5QbGF5ZXIke1xuICAgIHBsYXllck1heEluZGV4ID8gYCAke2kgKyAxfWAgOiAnJ1xuICB9IE5hbWU8L2xhYmVsPlxuICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJwbGF5ZXItJHtpfS1uYW1lXCIgaWQ9XCJwbGF5ZXItJHtpfS1uYW1lXCI+XG4gIDwvZGl2PmA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwbGF5ZXJTZXRVcFZpZXcocGxheWVyTWF4SW5kZXgpIHtcbiAgaGlkZUFsbFZpZXdzKCk7XG4gIGRvbS5wbGF5ZXJTZXRVcFZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG5cbiAgZm9yIChsZXQgaSA9IHBsYXllck1heEluZGV4OyBpID49IDA7IGkgLT0gMSlcbiAgICBkb20ucGxheWVyU2V0VXBGb3JtLmluc2VydEFkamFjZW50SFRNTChcbiAgICAgICdhZnRlckJlZ2luJyxcbiAgICAgIHBsYXllck5hbWVGaWVsZFRlbXBsYXRlKGksIHBsYXllck1heEluZGV4KVxuICAgICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnYW1lVmlldygpIHtcbiAgaGlkZUFsbFZpZXdzKCk7XG4gIGRvbS5nYW1lVmlldy5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhpZ2hsaWdodEdhbWVBcmVhKGdhbWVBcmVhSW5kZXgpIHtcbiAgZG9tLmdhbWVBcmVhRGl2cy5mb3JFYWNoKChnYW1lQXJlYSwgaSkgPT4ge1xuICAgIGNvbnN0IHNoaXBzID0gZ2FtZUFyZWEucXVlcnlTZWxlY3RvckFsbCgnLnNoaXAnKTtcbiAgICBpZiAoaSAhPT0gZ2FtZUFyZWFJbmRleCkge1xuICAgICAgZ2FtZUFyZWEuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICAgIHNoaXBzLmZvckVhY2goKHNoaXApID0+IHNoaXAuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnYW1lQXJlYS5jbGFzc0xpc3QucmVtb3ZlKCdkaXNhYmxlZCcpO1xuICAgICAgc2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4gc2hpcC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKSk7XG4gICAgfVxuICB9KTtcbn1cbiIsImV4cG9ydCBjb25zdCBnYW1lYm9hcmRMZW5ndGggPSAxMDtcbmV4cG9ydCBjb25zdCBzaGlwTGVuZ3RocyA9IFs1LCA0LCAzLCAzLCAyXTtcbiIsImltcG9ydCAqIGFzIHNldHRpbmdzIGZyb20gJy4vc2V0dGluZ3MnO1xuaW1wb3J0ICogYXMgZG9tIGZyb20gJy4vZG9tLWVsZW1lbnRzJztcblxuZnVuY3Rpb24gZHJhd0dhbWVib2FyZHMoc3F1YXJlTGVuZ3RoLCBnYW1lYm9hcmRMZW5ndGgpIHtcbiAgZG9tLmdhbWVib2FyZERpdnMuZm9yRWFjaCgoZ2FtZWJvYXJkRGl2KSA9PiB7XG4gICAgZ2FtZWJvYXJkRGl2LnN0eWxlLmRpc3BsYXkgPSAnZ3JpZCc7XG4gICAgZ2FtZWJvYXJkRGl2LnN0eWxlLmdyaWRUZW1wbGF0ZSA9IGByZXBlYXQoJHtnYW1lYm9hcmRMZW5ndGh9LCAke3NxdWFyZUxlbmd0aH1weCkgLyByZXBlYXQoJHtnYW1lYm9hcmRMZW5ndGh9LCAke3NxdWFyZUxlbmd0aH1weClgO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnYW1lYm9hcmRMZW5ndGggKiogMjsgaSArPSAxKVxuICAgICAgZ2FtZWJvYXJkRGl2Lmluc2VydEFkamFjZW50SFRNTChcbiAgICAgICAgJ2JlZm9yZWVuZCcsXG4gICAgICAgIGA8ZGl2IGNsYXNzPVwic3F1YXJlXCIgZGF0YS1pbmRleD1cIiR7aX1cIj48L2Rpdj5gXG4gICAgICApO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc2hpcFRlbXBsYXRlKHNxdWFyZUxlbmd0aCwgc2hpcExlbmd0aCwgc2hpcEluZGV4LCBnYW1lQXJlYUluZGV4KSB7XG4gIGxldCB0ZW1wbGF0ZSA9IGA8ZGl2IHN0eWxlPVwiZGlzcGxheTogZ3JpZDsgZ3JpZC10ZW1wbGF0ZTogcmVwZWF0KCR7c2hpcExlbmd0aH0sICR7c3F1YXJlTGVuZ3RofXB4KSAvIHJlcGVhdCg0LCAke1xuICAgIHNxdWFyZUxlbmd0aCAvIDJcbiAgfXB4KTtcIiBjbGFzcz1cInNoaXBcIiBkYXRhLWdhbWUtYXJlYS1pbmRleD1cIiR7Z2FtZUFyZWFJbmRleH1cIiBkYXRhLWluZGV4PVwiJHtzaGlwSW5kZXh9XCIgZGF0YS1zcXVhcmUtbGVuZ3RoPVwiJHtzcXVhcmVMZW5ndGh9XCIgZGF0YS1vcmllbnRhdGlvbj1cIjBcIiBkcmFnZ2FibGU9XCJ0cnVlXCI+YDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgdGVtcGxhdGUgKz0gYDxkaXYgY2xhc3M9XCJzaGlwLXNxdWFyZSB0b3AtbGVmdFwiPjwvZGl2PmA7XG4gICAgICB0ZW1wbGF0ZSArPSBgPGRpdiBjbGFzcz1cInNoaXAtc3F1YXJlIHRvcC1yaWdodFwiPjwvZGl2PmA7XG4gICAgfSBlbHNlIGlmIChpID09PSBzaGlwTGVuZ3RoIC0gMSkge1xuICAgICAgdGVtcGxhdGUgKz0gYDxkaXYgY2xhc3M9XCJzaGlwLXNxdWFyZSBib3R0b20tbGVmdFwiPjwvZGl2PmA7XG4gICAgICB0ZW1wbGF0ZSArPSBgPGRpdiBjbGFzcz1cInNoaXAtc3F1YXJlIGJvdHRvbS1yaWdodFwiPjwvZGl2PmA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRlbXBsYXRlICs9IGA8ZGl2IGNsYXNzPVwic2hpcC1zcXVhcmUgZnVsbFwiPjwvZGl2PmA7XG4gICAgfVxuICB9XG4gIHRlbXBsYXRlICs9IGA8YnV0dG9uIGNsYXNzPVwicm90YXRlXCI+UjwvYnV0dG9uPjwvZGl2PmA7XG4gIHJldHVybiB0ZW1wbGF0ZTtcbn1cblxuZnVuY3Rpb24gZHJhd1NoaXBzKHNxdWFyZUxlbmd0aCkge1xuICBkb20uc2hpcHNEaXZzLmZvckVhY2goKHNoaXBzRGl2LCBnYW1lQXJlYUluZGV4KSA9PiB7XG4gICAgc2V0dGluZ3Muc2hpcExlbmd0aHMuZm9yRWFjaCgoc2hpcExlbmd0aCwgc2hpcEluZGV4KSA9PiB7XG4gICAgICBzaGlwc0Rpdi5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAgICdiZWZvcmVlbmQnLFxuICAgICAgICBzaGlwVGVtcGxhdGUoc3F1YXJlTGVuZ3RoLCBzaGlwTGVuZ3RoLCBzaGlwSW5kZXgsIGdhbWVBcmVhSW5kZXgpXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dDaGFuZ2VkU2hpcE9yaWVudGF0aW9uKHNoaXApIHtcbiAgc2hpcC5kYXRhc2V0Lm9yaWVudGF0aW9uID0gMSAtIE51bWJlcihzaGlwLmRhdGFzZXQub3JpZW50YXRpb24pO1xuICBzaGlwLnN0eWxlLmdyaWRUZW1wbGF0ZSA9IHNoaXAuc3R5bGUuZ3JpZFRlbXBsYXRlXG4gICAgLnNwbGl0KCcgLyAnKVxuICAgIC5yZXZlcnNlKClcbiAgICAuam9pbignIC8gJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xvcml6ZVNoaXBCb3JkZXIoXG4gIFtyb3csIGNvbF0sXG4gIG9yaWVudGF0aW9uLFxuICBzaGlwTGVuZ3RoLFxuICBnYW1lYm9hcmRJbmRleCxcbiAgbGVnYWxcbikge1xuICBjb25zdCBib3JkZXJPZmZzZXRzID0gW1xuICAgIFstMSwgMF0sXG4gICAgW3NoaXBMZW5ndGgsIDBdLFxuICBdO1xuICBmb3IgKGxldCBpID0gLTE7IGkgPD0gc2hpcExlbmd0aDsgaSArPSAxKSBib3JkZXJPZmZzZXRzLnB1c2goW2ksIC0xXSwgW2ksIDFdKTtcblxuICBib3JkZXJPZmZzZXRzXG4gICAgLm1hcCgob2Zmc2V0cykgPT4ge1xuICAgICAgY29uc3QgW3Jvd09mZnNldCwgY29sT2Zmc2V0XSA9IG9yaWVudGF0aW9uID8gb2Zmc2V0cy5yZXZlcnNlKCkgOiBvZmZzZXRzO1xuICAgICAgcmV0dXJuIFtyb3cgKyByb3dPZmZzZXQsIGNvbCArIGNvbE9mZnNldF07XG4gICAgfSlcbiAgICAuZmlsdGVyKChwb3NpdGlvbikgPT5cbiAgICAgIHBvc2l0aW9uLmV2ZXJ5KChjb29yZCkgPT4gY29vcmQgPj0gMCAmJiBjb29yZCA8IHNldHRpbmdzLmdhbWVib2FyZExlbmd0aClcbiAgICApXG4gICAgLmZvckVhY2goKFtib3JkZXJSb3csIGJvcmRlckNvbF0pID0+IHtcbiAgICAgIGNvbnN0IHNxdWFyZUluZGV4ID0gc2V0dGluZ3MuZ2FtZWJvYXJkTGVuZ3RoICogYm9yZGVyUm93ICsgYm9yZGVyQ29sO1xuICAgICAgZG9tLmdhbWVib2FyZERpdnNbZ2FtZWJvYXJkSW5kZXhdXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKGAuc3F1YXJlW2RhdGEtaW5kZXg9XCIke3NxdWFyZUluZGV4fVwiXWApXG4gICAgICAgIC5jbGFzc0xpc3QuYWRkKGAke2xlZ2FsID8gJ2xlZ2FsJyA6ICdlcnJvcid9LWJvcmRlcmApO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5jb2xvcml6ZVNoaXBCb3JkZXIoKSB7XG4gIGRvbS5nYW1lYm9hcmRTcXVhcmVEaXZzKCkuZm9yRWFjaCgoc3F1YXJlKSA9PiB7XG4gICAgc3F1YXJlLmNsYXNzTGlzdC5yZW1vdmUoJ2xlZ2FsLWJvcmRlcicsICdlcnJvci1ib3JkZXInKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93RXJyb3JTaGlwT3JpZW50YXRpb24oc2hpcCwgcG9zaXRpb24pIHtcbiAgc2hvd0NoYW5nZWRTaGlwT3JpZW50YXRpb24oc2hpcCk7XG4gIGNvbG9yaXplU2hpcEJvcmRlcihcbiAgICBwb3NpdGlvbixcbiAgICBOdW1iZXIoc2hpcC5kYXRhc2V0Lm9yaWVudGF0aW9uKSxcbiAgICBzZXR0aW5ncy5zaGlwTGVuZ3Roc1tOdW1iZXIoc2hpcC5kYXRhc2V0LmluZGV4KV0sXG4gICAgTnVtYmVyKHNoaXAuZGF0YXNldC5nYW1lQXJlYUluZGV4KSxcbiAgICBmYWxzZVxuICApO1xuXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIHNob3dDaGFuZ2VkU2hpcE9yaWVudGF0aW9uKHNoaXApO1xuICAgIHVuY29sb3JpemVTaGlwQm9yZGVyKCk7XG4gIH0sIDUwMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3R2FtZUFyZWFzKG5hbWVMYWJlbHMpIHtcbiAgZG9tLmdhbWVib2FyZExhYmVsRGl2cy5mb3JFYWNoKChsYWJlbERpdiwgaSkgPT4ge1xuICAgIGxhYmVsRGl2LnRleHRDb250ZW50ID0gYCR7bmFtZUxhYmVsc1tpXX0ncyBTaGlweWFyZGA7XG4gIH0pO1xuXG4gIGNvbnN0IHNxdWFyZUxlbmd0aCA9XG4gICAgTWF0aC5taW4od2luZG93LmlubmVySGVpZ2h0LCB3aW5kb3cuaW5uZXJXaWR0aCkgL1xuICAgICgyLjI1ICogc2V0dGluZ3MuZ2FtZWJvYXJkTGVuZ3RoKTtcbiAgZHJhd0dhbWVib2FyZHMoc3F1YXJlTGVuZ3RoLCBzZXR0aW5ncy5nYW1lYm9hcmRMZW5ndGgpO1xuICBkcmF3U2hpcHMoc3F1YXJlTGVuZ3RoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dHYW1lYm9hcmRTZXRVcE1lc3NhZ2UobmFtZSkge1xuICBkb20uZ2FtZU1lc3NhZ2UudGV4dENvbnRlbnQgPSBgJHtuYW1lfSwgcGxhY2UgeW91ciBzaGlwcy5gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd0dhbWVib2FyZFNldFVwQ2hhbmdlUGxheWVyQnV0dG9uKCkge1xuICBjb25zb2xlLmxvZygnc2hvdyBidXR0b24nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dQbGF5R2FtZUJ1dHRvbigpIHt9XG4iLCJleHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1swXS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5jbHVkZXNBcnJheShhcnJheSwgbmVzdGVkQXJyYXkpIHtcbiAgcmV0dXJuIG5lc3RlZEFycmF5LnNvbWUoKGFycmF5SXRlbSkgPT5cbiAgICBhcnJheUl0ZW0uZXZlcnkoKGl0ZW0sIGkpID0+IGl0ZW0gPT09IGFycmF5W2ldKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzQXJyYXkoYXJyYXkxLCBhcnJheTIpIHtcbiAgcmV0dXJuIGFycmF5MS5ldmVyeSgoZWxlbSwgaSkgPT4gYXJyYXkyW2ldID09PSBlbGVtKTtcbn1cbiIsImltcG9ydCB7IGNhcGl0YWxpemUsIGluY2x1ZGVzQXJyYXkgfSBmcm9tICcuL3V0aWxpdGllcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBMZW5ndGhhYmxlKGxlbmd0aCkge1xuICByZXR1cm4geyBsZW5ndGggfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNpbmthYmxlKGxlbmd0aCwgaGl0cykge1xuICBsZXQgaGl0Q291bnQgPSBoaXRzO1xuXG4gIGZ1bmN0aW9uIGhpdCgpIHtcbiAgICBoaXRDb3VudCArPSAxO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNTdW5rKCkge1xuICAgIHJldHVybiBsZW5ndGggPT09IGhpdENvdW50O1xuICB9XG5cbiAgcmV0dXJuIHsgaGl0LCBpc1N1bmsgfTtcbn1cblxuZnVuY3Rpb24gQ29sbGVjdGlvbk1vdmVhYmxlKFxuICBjb2xsZWN0aW9uLFxuICBjb2xsZWN0aW9uSXRlbU5hbWUsXG4gIGFyZWFMZW5ndGggPSBJbmZpbml0eVxuKSB7XG4gIGZ1bmN0aW9uIGl0ZW1BcmVhKHBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbikge1xuICAgIGNvbnN0IGFyZWEgPSBbXTtcbiAgICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9yaWVudGF0aW9uID09PSB1bmRlZmluZWQpIHJldHVybiBhcmVhO1xuXG4gICAgY29uc3QgY29vcmRJbmRleCA9IHRoaXMub3JpZW50YXRpb247XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzW2NvbGxlY3Rpb25JdGVtTmFtZV0ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGNvb3JkaW5hdGUgPSBbLi4ucG9zaXRpb25dO1xuICAgICAgY29vcmRpbmF0ZVtjb29yZEluZGV4XSArPSBpO1xuICAgICAgYXJlYS5wdXNoKGNvb3JkaW5hdGUpO1xuICAgIH1cblxuICAgIHJldHVybiBhcmVhO1xuICB9XG5cbiAgY29sbGVjdGlvbi5mb3JFYWNoKChjb2xsZWN0aW9uSXRlbSkgPT5cbiAgICBPYmplY3QuYXNzaWduKGNvbGxlY3Rpb25JdGVtLCB7IG9yaWVudGF0aW9uOiAwLCBhcmVhOiBpdGVtQXJlYSB9KVxuICApO1xuXG4gIGZ1bmN0aW9uIGNsYW1wVG9BcmVhKHBvc2l0aW9uLCBpdGVtKSB7XG4gICAgY29uc3QgbWF4ZXMgPSBbXG4gICAgICBhcmVhTGVuZ3RoIC0gaXRlbVtjb2xsZWN0aW9uSXRlbU5hbWVdLmxlbmd0aCxcbiAgICAgIGFyZWFMZW5ndGggLSAxLFxuICAgIF07XG4gICAgY29uc3QgaXRlbU1heGVzID0gaXRlbS5vcmllbnRhdGlvbiA9PT0gMCA/IG1heGVzIDogWy4uLm1heGVzXS5yZXZlcnNlKCk7XG5cbiAgICByZXR1cm4gcG9zaXRpb24ubWFwKChjb29yZCwgaSkgPT5cbiAgICAgIE1hdGgubWF4KDAsIE1hdGgubWluKGl0ZW1NYXhlc1tpXSwgY29vcmQpKVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRCb3JkZXJpbmdBcmVhKGFyZWEpIHtcbiAgICByZXR1cm4gYXJlYS5yZWR1Y2UoKGJvcmRlcmluZ0FyZWEsIFtyb3csIGNvbF0pID0+IHtcbiAgICAgIGNvbnN0IGJvcmRlcmluZ1Bvc2l0aW9ucyA9IFtcbiAgICAgICAgWzEsIDBdLFxuICAgICAgICBbLTEsIDBdLFxuICAgICAgICBbMCwgMV0sXG4gICAgICAgIFswLCAtMV0sXG4gICAgICAgIFsxLCAxXSxcbiAgICAgICAgWzEsIC0xXSxcbiAgICAgICAgWy0xLCAxXSxcbiAgICAgICAgWy0xLCAxXSxcbiAgICAgIF1cbiAgICAgICAgLm1hcCgoW3Jvd09mZnNldCwgY29sT2Zmc2V0XSkgPT4gW3JvdyArIHJvd09mZnNldCwgY29sICsgY29sT2Zmc2V0XSlcbiAgICAgICAgLmZpbHRlcigoYm9yZGVyaW5nUG9zaXRpb24pID0+ICFpbmNsdWRlc0FycmF5KGJvcmRlcmluZ1Bvc2l0aW9uLCBhcmVhKSk7XG4gICAgICByZXR1cm4gWy4uLmJvcmRlcmluZ0FyZWEsIC4uLmJvcmRlcmluZ1Bvc2l0aW9uc107XG4gICAgfSwgW10pO1xuICB9XG5cbiAgZnVuY3Rpb24gaWxsZWdhbFBvc2l0aW9ucyh7IGV4Y2x1ZGluZyB9ID0ge30pIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbi5yZWR1Y2UoKHBvc2l0aW9ucywgY29sbGVjdGlvbkl0ZW0sIGNvbGxlY3Rpb25JbmRleCkgPT4ge1xuICAgICAgaWYgKCFjb2xsZWN0aW9uSXRlbS5wb3NpdGlvbiB8fCBleGNsdWRpbmcuaW5jbHVkZXMoY29sbGVjdGlvbkluZGV4KSlcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9ucztcblxuICAgICAgY29uc3QgY29sbGVjdGlvbkl0ZW1BcmVhID0gY29sbGVjdGlvbkl0ZW0uYXJlYSgpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4ucG9zaXRpb25zLFxuICAgICAgICAuLi5jb2xsZWN0aW9uSXRlbUFyZWEsXG4gICAgICAgIC4uLmdldEJvcmRlcmluZ0FyZWEoY29sbGVjdGlvbkl0ZW1BcmVhKSxcbiAgICAgIF07XG4gICAgfSwgW10pO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVnYWxQbGFjZW1lbnQoY29sbGVjdGlvbkluZGV4LCBwb3NpdGlvbikge1xuICAgIHJldHVybiBjb2xsZWN0aW9uW2NvbGxlY3Rpb25JbmRleF1cbiAgICAgIC5hcmVhKHBvc2l0aW9uKVxuICAgICAgLmV2ZXJ5KFxuICAgICAgICAoYXJlYVBvc2l0aW9uKSA9PlxuICAgICAgICAgICFpbmNsdWRlc0FycmF5KFxuICAgICAgICAgICAgYXJlYVBvc2l0aW9uLFxuICAgICAgICAgICAgaWxsZWdhbFBvc2l0aW9ucyh7IGV4Y2x1ZGluZzogW2NvbGxlY3Rpb25JbmRleF0gfSlcbiAgICAgICAgICApXG4gICAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gcGxhY2UoY29sbGVjdGlvbkluZGV4LCBwb3NpdGlvbikge1xuICAgIGNvbnN0IGNvbGxlY3Rpb25JdGVtID0gY29sbGVjdGlvbltjb2xsZWN0aW9uSW5kZXhdO1xuICAgIGNvbnN0IGNsYW1wZWRQb3NpdGlvbiA9IGNsYW1wVG9BcmVhKHBvc2l0aW9uLCBjb2xsZWN0aW9uSXRlbSk7XG4gICAgaWYgKCFsZWdhbFBsYWNlbWVudChjb2xsZWN0aW9uSW5kZXgsIGNsYW1wZWRQb3NpdGlvbikpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgcG9zaXRpb24gaXMgaWxsZWdhbCEnKTtcblxuICAgIGNvbGxlY3Rpb25JdGVtLnBvc2l0aW9uID0gY2xhbXBlZFBvc2l0aW9uO1xuICAgIHJldHVybiBjb2xsZWN0aW9uSXRlbS5wb3NpdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFsbFBsYWNlZCgpIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbi5ldmVyeSgoY29sbGVjdGlvbkl0ZW0pID0+IGNvbGxlY3Rpb25JdGVtLnBvc2l0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShjb2xsZWN0aW9uSW5kZXgpIHtcbiAgICBjb25zdCBjb2xsZWN0aW9uSXRlbSA9IGNvbGxlY3Rpb25bY29sbGVjdGlvbkluZGV4XTtcbiAgICBjb2xsZWN0aW9uSXRlbS5vcmllbnRhdGlvbiA9IDEgLSBjb2xsZWN0aW9uSXRlbS5vcmllbnRhdGlvbjtcbiAgICBpZiAoY29sbGVjdGlvbkl0ZW0ucG9zaXRpb24pXG4gICAgICB0cnkge1xuICAgICAgICBwbGFjZShjb2xsZWN0aW9uSW5kZXgsIGNvbGxlY3Rpb25JdGVtLnBvc2l0aW9uKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJvdGF0ZShjb2xsZWN0aW9uSW5kZXgpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgIHJldHVybiBjb2xsZWN0aW9uSXRlbS5vcmllbnRhdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJhbmRvbVBvc2l0aW9uKCkge1xuICAgIHJldHVybiBbLi4ubmV3IEFycmF5KDIpXS5tYXAoKCkgPT4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJlYUxlbmd0aCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXV0b1BsYWNlKCkge1xuICAgIGNvbGxlY3Rpb24uZm9yRWFjaCgoY29sbGVjdGlvbkl0ZW0sIGkpID0+IHtcbiAgICAgIGlmIChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKSkgcm90YXRlKGkpO1xuICAgICAgd2hpbGUgKCFjb2xsZWN0aW9uSXRlbS5wb3NpdGlvbikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHBsYWNlKGksIGdldFJhbmRvbVBvc2l0aW9uKCkpO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGNhcGl0YWxpemVkQ29sbGVjdGlvbkl0ZW0gPSBjYXBpdGFsaXplKGNvbGxlY3Rpb25JdGVtTmFtZSk7XG5cbiAgcmV0dXJuIHtcbiAgICBbYHBsYWNlJHtjYXBpdGFsaXplZENvbGxlY3Rpb25JdGVtfWBdOiBwbGFjZSxcbiAgICBbYGxlZ2FsJHtjYXBpdGFsaXplZENvbGxlY3Rpb25JdGVtfVBsYWNlbWVudGBdOiBsZWdhbFBsYWNlbWVudCxcbiAgICBbYGFsbCR7Y2FwaXRhbGl6ZWRDb2xsZWN0aW9uSXRlbX1zUGxhY2VkYF06IGFsbFBsYWNlZCxcbiAgICBbYHJvdGF0ZSR7Y2FwaXRhbGl6ZWRDb2xsZWN0aW9uSXRlbX1gXTogcm90YXRlLFxuICAgIFtgYXV0b1BsYWNlJHtjYXBpdGFsaXplZENvbGxlY3Rpb25JdGVtfXNgXTogYXV0b1BsYWNlLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29sbGVjdGlvbmFibGUoXG4gIGNvbGxlY3Rpb25EYXRhLFxuICBjb2xsZWN0aW9uSXRlbU5hbWUsXG4gIGNvbGxlY3Rpb25JdGVtRmFjdG9yeSxcbiAgeyBtb3ZlYWJsZSA9IGZhbHNlLCBhbGxNZXRob2ROYW1lcyA9IFtdIH0gPSB7fVxuKSB7XG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uRGF0YS5tYXAoKGRhdGEpID0+ICh7XG4gICAgW2NvbGxlY3Rpb25JdGVtTmFtZV06IGNvbGxlY3Rpb25JdGVtRmFjdG9yeShkYXRhKSxcbiAgfSkpO1xuXG4gIGNvbnN0IGFsbE1ldGhvZHMgPSBhbGxNZXRob2ROYW1lcy5yZWR1Y2UoKG1ldGhvZHMsIG1ldGhvZCkgPT4ge1xuICAgIGNvbnN0IGNhcGl0YWxpemVkTWV0aG9kID0gY2FwaXRhbGl6ZShtZXRob2QpO1xuICAgIGZ1bmN0aW9uIGFsbE1ldGhvZCgpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uLmV2ZXJ5KChjb2xsZWN0aW9uSXRlbSkgPT5cbiAgICAgICAgY29sbGVjdGlvbkl0ZW1bY29sbGVjdGlvbkl0ZW1OYW1lXVtgaXMke2NhcGl0YWxpemVkTWV0aG9kfWBdKClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1ldGhvZHMsXG4gICAgICBbYGFsbCR7Y2FwaXRhbGl6ZWRNZXRob2R9YF06IGFsbE1ldGhvZCxcbiAgICB9O1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHtcbiAgICBbYCR7Y29sbGVjdGlvbkl0ZW1OYW1lfXNgXTogY29sbGVjdGlvbixcbiAgICAuLi5hbGxNZXRob2RzLFxuICAgIC4uLihtb3ZlYWJsZVxuICAgICAgPyBDb2xsZWN0aW9uTW92ZWFibGUoXG4gICAgICAgICAgY29sbGVjdGlvbixcbiAgICAgICAgICBjb2xsZWN0aW9uSXRlbU5hbWUsXG4gICAgICAgICAgbW92ZWFibGUuYXJlYUxlbmd0aCB8fCBJbmZpbml0eVxuICAgICAgICApXG4gICAgICA6IHt9KSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE5hbWVhYmxlKG5hbWUpIHtcbiAgZnVuY3Rpb24gc2V0TmFtZShuZXdOYW1lKSB7XG4gICAgdGhpcy5uYW1lID0gbmV3TmFtZTtcbiAgfVxuXG4gIHJldHVybiB7IG5hbWUsIHNldE5hbWUgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEF0dGFja2FibGUoYXR0YWNrcywgeyBhdHRhY2tJdGVtTmFtZSB9ID0ge30pIHtcbiAgZnVuY3Rpb24gc2VuZEF0dGFja1RvSXRlbXMoYXR0YWNrSXRlbXMsIHBvc2l0aW9uKSB7XG4gICAgYXR0YWNrSXRlbXMuZm9yRWFjaCgoYXR0YWNrSXRlbSkgPT4ge1xuICAgICAgaWYgKGluY2x1ZGVzQXJyYXkocG9zaXRpb24sIGF0dGFja0l0ZW0uYXJlYSgpKSlcbiAgICAgICAgYXR0YWNrSXRlbVthdHRhY2tJdGVtTmFtZV0uaGl0KCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWNlaXZlQXR0YWNrKHBvc2l0aW9uKSB7XG4gICAgYXR0YWNrcy5wdXNoKHBvc2l0aW9uKTtcbiAgICBpZiAoYXR0YWNrSXRlbU5hbWUpIHNlbmRBdHRhY2tUb0l0ZW1zKHRoaXNbYCR7YXR0YWNrSXRlbU5hbWV9c2BdLCBwb3NpdGlvbik7XG4gIH1cblxuICByZXR1cm4geyBhdHRhY2tzLCByZWNlaXZlQXR0YWNrIH07XG59XG5cbmZ1bmN0aW9uIEF1dG9BdHRhY2tpbmcoKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUF0dGFja1Bvc2l0aW9uKHRhcmdldCkge1xuICAgIHJldHVybiBbLi4ubmV3IEFycmF5KDIpXS5tYXAoKCkgPT5cbiAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRhcmdldC5sZW5ndGgpXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF1dG9BdHRhY2sodGFyZ2V0KSB7XG4gICAgbGV0IHBvc2l0aW9uID0gcmFuZG9tQXR0YWNrUG9zaXRpb24odGFyZ2V0KTtcbiAgICB3aGlsZSAoaW5jbHVkZXNBcnJheShwb3NpdGlvbiwgdGFyZ2V0LmF0dGFja3MgfHwgW10pKVxuICAgICAgcG9zaXRpb24gPSByYW5kb21BdHRhY2tQb3NpdGlvbih0YXJnZXQpO1xuICAgIHRoaXMuYXR0YWNrKHRhcmdldCwgcG9zaXRpb24pO1xuICB9XG5cbiAgcmV0dXJuIHsgYXV0b0F0dGFjayB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQXR0YWNraW5nKHsgYXV0byA9IGZhbHNlIH0gPSB7fSkge1xuICBmdW5jdGlvbiBhdHRhY2sodGFyZ2V0LCBwb3NpdGlvbikge1xuICAgIGlmIChpbmNsdWRlc0FycmF5KHBvc2l0aW9uLCB0YXJnZXQuYXR0YWNrcyB8fCBbXSkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoYXQgcG9zaXRpb24gaGFzIGFscmVhZHkgYmVlbiBhdHRhY2tlZCEnKTtcbiAgICB0YXJnZXQucmVjZWl2ZUF0dGFjayhwb3NpdGlvbik7XG4gIH1cblxuICByZXR1cm4geyBhdHRhY2ssIC4uLihhdXRvID8gQXV0b0F0dGFja2luZygpIDoge30pIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUdXJuVGFraW5nKHsgbWV0aG9kID0gJycgfSA9IHt9KSB7XG4gIGZ1bmN0aW9uIHRha2VUdXJuKGRhdGEpIHtcbiAgICBpZiAoIW1ldGhvZCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgdGhpc1ttZXRob2RdKGRhdGEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHsgdGFrZVR1cm4gfTtcbn1cbiIsImltcG9ydCB7IExlbmd0aGFibGUsIFNpbmthYmxlIH0gZnJvbSAnLi9jb21wb3NpdGlvbi11bml0cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNoaXAoeyBsZW5ndGggPSAyLCBoaXRzID0gMCB9ID0ge30pIHtcbiAgcmV0dXJuIHsgdHlwZTogJ1NoaXAnLCAuLi5MZW5ndGhhYmxlKGxlbmd0aCksIC4uLlNpbmthYmxlKGxlbmd0aCwgaGl0cykgfTtcbn1cbiIsImltcG9ydCB7IEF0dGFja2luZywgVHVyblRha2luZywgTmFtZWFibGUgfSBmcm9tICcuL2NvbXBvc2l0aW9uLXVuaXRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIEh1bWFuUGxheWVyKG5hbWUgPSAnUGxheWVyJykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdodW1hblBsYXllcicsXG4gICAgLi4uTmFtZWFibGUobmFtZSksXG4gICAgLi4uQXR0YWNraW5nKCksXG4gICAgLi4uVHVyblRha2luZygpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29tcHV0ZXJQbGF5ZXIoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ2NvbXB1dGVyUGxheWVyJyxcbiAgICAuLi5OYW1lYWJsZSgnQ29tcHV0ZXInKSxcbiAgICAuLi5BdHRhY2tpbmcoeyBhdXRvOiB0cnVlIH0pLFxuICAgIC4uLlR1cm5UYWtpbmcoeyBtZXRob2Q6ICdhdXRvQXR0YWNrJyB9KSxcbiAgfTtcbn1cbiIsImltcG9ydCBHYW1lYm9hcmQgZnJvbSAnLi9nYW1lYm9hcmQnO1xuaW1wb3J0IHsgQ29tcHV0ZXJQbGF5ZXIsIEh1bWFuUGxheWVyIH0gZnJvbSAnLi9wbGF5ZXInO1xuXG5leHBvcnQgY29uc3QgZ2FtZURhdGEgPSB7XG4gIG1vZGVzOiB7IHBsYXllck1vZGU6IDAgfSxcbiAgcGxheWVyczogW10sXG4gIGdhbWVib2FyZHM6IFtdLFxuICBjdXJyUGxheWVySW5kZXg6IDAsXG4gIGdhbWVPdmVyOiBmYWxzZSxcbn07XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVNb2Rlcyhtb2Rlcykge1xuICBjb25zdCBnYW1lTW9kZXMgPSB7IC4uLm1vZGVzIH07XG4gIE9iamVjdC5rZXlzKGdhbWVNb2RlcykuZm9yRWFjaCgobW9kZSkgPT4ge1xuICAgIGdhbWVNb2Rlc1ttb2RlXSA9IE51bWJlcihnYW1lTW9kZXNbbW9kZV0pO1xuICB9KTtcbiAgZ2FtZURhdGEubW9kZXMgPSBnYW1lTW9kZXM7XG59XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVHYW1lYm9hcmRzKGxlbmd0aCwgc2hpcExlbmd0aHMpIHtcbiAgZ2FtZURhdGEuZ2FtZWJvYXJkcyA9IFsuLi5uZXcgQXJyYXkoMildLm1hcCgoKSA9PlxuICAgIEdhbWVib2FyZCh7IGxlbmd0aCwgc2hpcExlbmd0aHMgfSlcbiAgKTtcbiAgaWYgKGdhbWVEYXRhLm1vZGVzLnBsYXllck1vZGUpIHJldHVybjtcblxuICBjb25zdCBjb21wdXRlclBsYXllckluZGV4ID0gZ2FtZURhdGEucGxheWVycy5maW5kSW5kZXgoXG4gICAgKHBsYXllcikgPT4gcGxheWVyLnR5cGUgPT09ICdjb21wdXRlclBsYXllcidcbiAgKTtcbiAgZ2FtZURhdGEuZ2FtZWJvYXJkc1tjb21wdXRlclBsYXllckluZGV4XS5hdXRvUGxhY2VTaGlwcygpO1xufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplUGxheWVycygpIHtcbiAgaWYgKGdhbWVEYXRhLm1vZGVzLnBsYXllck1vZGUpIHtcbiAgICBnYW1lRGF0YS5wbGF5ZXJzID0gWy4uLm5ldyBBcnJheSgyKV0ubWFwKCgpID0+IEh1bWFuUGxheWVyKCkpO1xuICB9IGVsc2Uge1xuICAgIGdhbWVEYXRhLnBsYXllcnMgPSBbXTtcbiAgICBjb25zdCBodW1hblBsYXllckluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMik7XG4gICAgZ2FtZURhdGEucGxheWVyc1todW1hblBsYXllckluZGV4XSA9IEh1bWFuUGxheWVyKCk7XG4gICAgZ2FtZURhdGEucGxheWVyc1sxIC0gaHVtYW5QbGF5ZXJJbmRleF0gPSBDb21wdXRlclBsYXllcigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVQbGF5ZXJJbmRleCgpIHtcbiAgZ2FtZURhdGEuY3VyclBsYXllckluZGV4ID0gMDtcbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZUdhbWVPdmVyKCkge1xuICBnYW1lRGF0YS5nYW1lT3ZlciA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRHYW1lT3ZlcigpIHtcbiAgcmV0dXJuIGdhbWVEYXRhLmdhbWVib2FyZHMuc29tZSgoZ2FtZWJvYXJkKSA9PiBnYW1lYm9hcmQuYWxsU3VuaygpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVHYW1lKHtcbiAgcGxheWVyTW9kZSA9IDAsXG4gIGdhbWVib2FyZExlbmd0aCA9IDEwLFxuICBzaGlwTGVuZ3RocyA9IFs1LCA0LCAzLCAzLCAyXSxcbn0gPSB7fSkge1xuICBpbml0aWFsaXplTW9kZXMoeyBwbGF5ZXJNb2RlIH0pO1xuICBpbml0aWFsaXplUGxheWVycygpO1xuICBpbml0aWFsaXplR2FtZWJvYXJkcyhnYW1lYm9hcmRMZW5ndGgsIHNoaXBMZW5ndGhzKTtcbiAgaW5pdGlhbGl6ZVBsYXllckluZGV4KCk7XG4gIGluaXRpYWxpemVHYW1lT3ZlcigpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3VyckdhbWVib2FyZCgpIHtcbiAgcmV0dXJuIGdhbWVEYXRhLmdhbWVib2FyZHNbMSAtIGdhbWVEYXRhLmN1cnJQbGF5ZXJJbmRleF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXJyUGxheWVyKCkge1xuICByZXR1cm4gZ2FtZURhdGEucGxheWVyc1tnYW1lRGF0YS5jdXJyUGxheWVySW5kZXhdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGxheUdhbWUodG9va1R1cm4gPSBmYWxzZSkge1xuICBsZXQgdHVyblRha2VuID0gdG9va1R1cm47XG4gIHdoaWxlICghZ2FtZURhdGEuZ2FtZU92ZXIpIHtcbiAgICB0dXJuVGFrZW4gfHw9IGN1cnJQbGF5ZXIoKS50YWtlVHVybihjdXJyR2FtZWJvYXJkKCkpO1xuICAgIGlmICghdHVyblRha2VuKSBicmVhaztcblxuICAgIGdhbWVEYXRhLmdhbWVPdmVyID0gZ2V0R2FtZU92ZXIoKTtcbiAgICBnYW1lRGF0YS5jdXJyUGxheWVySW5kZXggPSAxIC0gZ2FtZURhdGEuY3VyclBsYXllckluZGV4O1xuICAgIHR1cm5UYWtlbiA9IGZhbHNlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBBdHRhY2thYmxlLCBDb2xsZWN0aW9uYWJsZSwgTGVuZ3RoYWJsZSB9IGZyb20gJy4vY29tcG9zaXRpb24tdW5pdHMnO1xuaW1wb3J0IFNoaXAgZnJvbSAnLi9zaGlwJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gR2FtZWJvYXJkKHtcbiAgc2hpcExlbmd0aHMgPSBbNSwgNCwgMywgMywgMl0sXG4gIGxlbmd0aCA9IDEwLFxuICBhdHRhY2tzID0gW10sXG59ID0ge30pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnR2FtZWJvYXJkJyxcbiAgICAuLi5MZW5ndGhhYmxlKGxlbmd0aCksXG4gICAgLi4uQ29sbGVjdGlvbmFibGUoXG4gICAgICBzaGlwTGVuZ3Rocy5tYXAoKHNoaXBMZW5ndGgpID0+IExlbmd0aGFibGUoc2hpcExlbmd0aCkpLFxuICAgICAgJ3NoaXAnLFxuICAgICAgU2hpcCxcbiAgICAgIHsgbW92ZWFibGU6IHsgYXJlYUxlbmd0aDogbGVuZ3RoIH0sIGFsbE1ldGhvZE5hbWVzOiBbJ3N1bmsnXSB9XG4gICAgKSxcbiAgICAuLi5BdHRhY2thYmxlKGF0dGFja3MsIHsgYXR0YWNrSXRlbU5hbWU6ICdzaGlwJyB9KSxcbiAgfTtcbn1cbiIsImltcG9ydCB7XG4gIGdhbWVib2FyZFNxdWFyZURpdnMsXG4gIHNoaXBEaXZzLFxuICByb3RhdGVTaGlwQnV0dG9ucyxcbn0gZnJvbSAnLi9kb20tZWxlbWVudHMnO1xuaW1wb3J0IHsgZ2FtZVZpZXcsIGhpZ2hsaWdodEdhbWVBcmVhIH0gZnJvbSAnLi92aWV3cyc7XG5pbXBvcnQge1xuICBkcmF3R2FtZUFyZWFzLFxuICBjb2xvcml6ZVNoaXBCb3JkZXIsXG4gIHVuY29sb3JpemVTaGlwQm9yZGVyLFxuICBzaG93Q2hhbmdlZFNoaXBPcmllbnRhdGlvbixcbiAgc2hvd0Vycm9yU2hpcE9yaWVudGF0aW9uLFxuICBzaG93R2FtZWJvYXJkU2V0VXBNZXNzYWdlLFxuICBzaG93R2FtZWJvYXJkU2V0VXBDaGFuZ2VQbGF5ZXJCdXR0b24sXG4gIHNob3dQbGF5R2FtZUJ1dHRvbixcbn0gZnJvbSAnLi92aWV3cy1nYW1lYm9hcmQtc2V0dXAnO1xuaW1wb3J0IHsgZ2FtZURhdGEgfSBmcm9tICcuL2dhbWUnO1xuaW1wb3J0ICogYXMgc2V0dGluZ3MgZnJvbSAnLi9zZXR0aW5ncyc7XG5pbXBvcnQgeyBlcXVhbHNBcnJheSB9IGZyb20gJy4vdXRpbGl0aWVzJztcblxuZnVuY3Rpb24gZW5hYmxlR2FtZWJvYXJkU2V0VXBFdmVudHMoKSB7XG4gIGNvbnN0IGdhbWVib2FyZFNxdWFyZXMgPSBbLi4uZ2FtZWJvYXJkU3F1YXJlRGl2cygpXS5tYXAoKHNxdWFyZSkgPT4gKHtcbiAgICBzcXVhcmUsXG4gICAgcG9zaXRpb246IFtcbiAgICAgIE1hdGguZmxvb3Ioc3F1YXJlLmRhdGFzZXQuaW5kZXggLyAxMCksXG4gICAgICBzcXVhcmUuZGF0YXNldC5pbmRleCAlIDEwLFxuICAgIF0sXG4gICAgZ2FtZUFyZWFJbmRleDogTnVtYmVyKHNxdWFyZS5jbG9zZXN0KCcuZ2FtZS1hcmVhJykuZGF0YXNldC5pbmRleCksXG4gIH0pKTtcblxuICBmdW5jdGlvbiB1cGRhdGVTaGlwUG9zaXRpb24oXG4gICAgc2hpcCxcbiAgICBnYW1lYm9hcmRJbmRleCA9IE51bWJlcihzaGlwLmRhdGFzZXQuZ2FtZUFyZWFJbmRleCksXG4gICAgc2hpcFBvc2l0aW9uID0gZ2FtZURhdGEuZ2FtZWJvYXJkc1tnYW1lYm9hcmRJbmRleF0uc2hpcHNbXG4gICAgICBOdW1iZXIoc2hpcC5kYXRhc2V0LmluZGV4KVxuICAgIF0ucG9zaXRpb25cbiAgKSB7XG4gICAgc2hpcC5jbGFzc0xpc3QuYWRkKCdvbi1nYW1lYm9hcmQnKTtcbiAgICBjb25zdCB0YXJnZXRTcXVhcmUgPSBnYW1lYm9hcmRTcXVhcmVzLmZpbmQoXG4gICAgICAoeyBwb3NpdGlvbjogdGFyZ2V0UG9zaXRpb24sIGdhbWVBcmVhSW5kZXg6IHRhcmdldEdhbWVBcmVhSW5kZXggfSkgPT5cbiAgICAgICAgZ2FtZWJvYXJkSW5kZXggPT09IHRhcmdldEdhbWVBcmVhSW5kZXggJiZcbiAgICAgICAgZXF1YWxzQXJyYXkoc2hpcFBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbilcbiAgICApLnNxdWFyZTtcbiAgICB0YXJnZXRTcXVhcmUuYXBwZW5kQ2hpbGQoc2hpcCk7XG4gIH1cblxuICBmdW5jdGlvbiBlbmFibGVHYW1lYm9hcmREcmFnQW5kRHJvcCgpIHtcbiAgICBsZXQgZHJhZ2dlZFNoaXA7XG4gICAgZ2FtZWJvYXJkU3F1YXJlcy5mb3JFYWNoKCh7IHNxdWFyZSwgcG9zaXRpb24sIGdhbWVBcmVhSW5kZXggfSkgPT4ge1xuICAgICAgZnVuY3Rpb24gZHJhZ092ZXJTcXVhcmUoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7XG4gICAgICAgIGlmIChOdW1iZXIoZHJhZ2dlZFNoaXAuZGF0YXNldC5nYW1lQXJlYUluZGV4KSAhPT0gZ2FtZUFyZWFJbmRleCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHNoaXBJbmRleCA9IE51bWJlcihkcmFnZ2VkU2hpcC5kYXRhc2V0LmluZGV4KTtcbiAgICAgICAgY29uc3Qgc2hpcE9yaWVudGF0aW9uID0gTnVtYmVyKGRyYWdnZWRTaGlwLmRhdGFzZXQub3JpZW50YXRpb24pO1xuICAgICAgICBjb25zdCBsZWdhbFNoaXBQbGFjZW1lbnQgPSBnYW1lRGF0YS5nYW1lYm9hcmRzW1xuICAgICAgICAgIGdhbWVBcmVhSW5kZXhcbiAgICAgICAgXS5sZWdhbFNoaXBQbGFjZW1lbnQoc2hpcEluZGV4LCBwb3NpdGlvbik7XG4gICAgICAgIGNvbG9yaXplU2hpcEJvcmRlcihcbiAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgICBzaGlwT3JpZW50YXRpb24sXG4gICAgICAgICAgc2V0dGluZ3Muc2hpcExlbmd0aHNbc2hpcEluZGV4XSxcbiAgICAgICAgICBnYW1lQXJlYUluZGV4LFxuICAgICAgICAgIGxlZ2FsU2hpcFBsYWNlbWVudFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc3F1YXJlLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgZHJhZ092ZXJTcXVhcmUpO1xuICAgICAgc3F1YXJlLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIHVuY29sb3JpemVTaGlwQm9yZGVyKTtcblxuICAgICAgZnVuY3Rpb24gZHJvcE9uU3F1YXJlKCkge1xuICAgICAgICBpZiAoTnVtYmVyKGRyYWdnZWRTaGlwLmRhdGFzZXQuZ2FtZUFyZWFJbmRleCkgIT09IGdhbWVBcmVhSW5kZXgpIHJldHVybjtcblxuICAgICAgICBjb25zdCBzaGlwSW5kZXggPSBOdW1iZXIoZHJhZ2dlZFNoaXAuZGF0YXNldC5pbmRleCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZ2FtZURhdGEuZ2FtZWJvYXJkc1tnYW1lQXJlYUluZGV4XS5wbGFjZVNoaXAoc2hpcEluZGV4LCBwb3NpdGlvbik7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZVNoaXBQb3NpdGlvbihkcmFnZ2VkU2hpcCk7XG4gICAgICAgIGlmIChnYW1lRGF0YS5nYW1lYm9hcmRzW2dhbWVBcmVhSW5kZXhdLmFsbFNoaXBzUGxhY2VkKCkpXG4gICAgICAgICAgc2hvd0dhbWVib2FyZFNldFVwQ2hhbmdlUGxheWVyQnV0dG9uKCk7XG4gICAgICB9XG4gICAgICBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGRyb3BPblNxdWFyZSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBzaGlwcyA9IHNoaXBEaXZzKCk7XG4gICAgc2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgZnVuY3Rpb24gZHJhZygpIHtcbiAgICAgICAgc2hpcC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgIH1cbiAgICAgIHNoaXAuYWRkRXZlbnRMaXN0ZW5lcignZHJhZycsIGRyYWcpO1xuXG4gICAgICBmdW5jdGlvbiBkcmFnU3RhcnQoZSkge1xuICAgICAgICBkcmFnZ2VkU2hpcCA9IHNoaXA7XG4gICAgICAgIGNvbnN0IHNxdWFyZUNlbnRlciA9IE51bWJlcihzaGlwLmRhdGFzZXQuc3F1YXJlTGVuZ3RoKSAvIDI7XG4gICAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERyYWdJbWFnZShzaGlwLCBzcXVhcmVDZW50ZXIsIHNxdWFyZUNlbnRlcik7XG4gICAgICAgIHNoaXBzLmZvckVhY2goKG90aGVyU2hpcCkgPT4ge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIG90aGVyU2hpcCAhPT0gc2hpcCAmJlxuICAgICAgICAgICAgb3RoZXJTaGlwLmNsYXNzTGlzdC5jb250YWlucygnb24tZ2FtZWJvYXJkJylcbiAgICAgICAgICApXG4gICAgICAgICAgICBvdGhlclNoaXAuY2xvc2VzdCgnLnNxdWFyZScpLmNsYXNzTGlzdC5hZGQoJ3dpdGgtYmFja2dyb3VuZC1zaGlwJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgc2hpcC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBkcmFnU3RhcnQpO1xuXG4gICAgICBmdW5jdGlvbiBkcmFnRW5kKCkge1xuICAgICAgICBzaGlwLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICB1bmNvbG9yaXplU2hpcEJvcmRlcigpO1xuICAgICAgICBzaGlwcy5mb3JFYWNoKChvdGhlclNoaXApID0+IHtcbiAgICAgICAgICBvdGhlclNoaXBcbiAgICAgICAgICAgIC5jbG9zZXN0KCcuc3F1YXJlJylcbiAgICAgICAgICAgID8uY2xhc3NMaXN0Py5yZW1vdmUoJ3dpdGgtYmFja2dyb3VuZC1zaGlwJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgc2hpcC5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgZHJhZ0VuZCk7XG4gICAgfSk7XG4gIH1cbiAgZW5hYmxlR2FtZWJvYXJkRHJhZ0FuZERyb3AoKTtcblxuICBmdW5jdGlvbiByb3RhdGVTaGlwKGUpIHtcbiAgICBjb25zdCBzaGlwID0gZS50YXJnZXQuY2xvc2VzdCgnLnNoaXAnKTtcbiAgICBjb25zdCBbZ2FtZUFyZWFJbmRleCwgc2hpcEluZGV4XSA9IFsnZ2FtZUFyZWFJbmRleCcsICdpbmRleCddLm1hcChcbiAgICAgIChhdHRyaWJ1dGUpID0+IE51bWJlcihzaGlwLmRhdGFzZXRbYXR0cmlidXRlXSlcbiAgICApO1xuICAgIGNvbnN0IHNoaXBQb3NpdGlvbiA9XG4gICAgICBnYW1lRGF0YS5nYW1lYm9hcmRzW2dhbWVBcmVhSW5kZXhdLnNoaXBzW3NoaXBJbmRleF0ucG9zaXRpb247XG5cbiAgICB0cnkge1xuICAgICAgZ2FtZURhdGEuZ2FtZWJvYXJkc1tnYW1lQXJlYUluZGV4XS5yb3RhdGVTaGlwKHNoaXBJbmRleCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICBzaG93RXJyb3JTaGlwT3JpZW50YXRpb24oc2hpcCwgc2hpcFBvc2l0aW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2hpcFBvc2l0aW9uKSB1cGRhdGVTaGlwUG9zaXRpb24oc2hpcCk7XG4gICAgc2hvd0NoYW5nZWRTaGlwT3JpZW50YXRpb24oc2hpcCk7XG4gIH1cbiAgcm90YXRlU2hpcEJ1dHRvbnMoKS5mb3JFYWNoKChidXR0b24pID0+XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcm90YXRlU2hpcClcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlR2FtZWJvYXJkU2V0VXAoKSB7XG4gIGNvbnN0IGluZGV4ID0gZ2FtZURhdGEuZ2FtZWJvYXJkcy5maW5kSW5kZXgoXG4gICAgKGdhbWVib2FyZCkgPT4gIWdhbWVib2FyZC5hbGxTaGlwc1BsYWNlZCgpXG4gICk7XG4gIGlmIChpbmRleCA8IDApIHNob3dQbGF5R2FtZUJ1dHRvbigpO1xuICBoaWdobGlnaHRHYW1lQXJlYShpbmRleCk7XG4gIHNob3dHYW1lYm9hcmRTZXRVcE1lc3NhZ2UoZ2FtZURhdGEucGxheWVyc1tpbmRleF0ubmFtZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0R2FtZWJvYXJkU2V0VXAoKSB7XG4gIGdhbWVWaWV3KCk7XG4gIGRyYXdHYW1lQXJlYXMoZ2FtZURhdGEucGxheWVycy5tYXAoKHBsYXllcikgPT4gcGxheWVyLm5hbWUpKTtcbiAgZW5hYmxlR2FtZWJvYXJkU2V0VXBFdmVudHMoKTtcbiAgdXBkYXRlR2FtZWJvYXJkU2V0VXAoKTtcbn1cbiIsImltcG9ydCBzdGFydEdhbWVib2FyZFNldFVwIGZyb20gJy4vZG9tLWV2ZW50cy1nYW1lYm9hcmQtc2V0dXAnO1xuaW1wb3J0IHsgbW9kZVNlbGVjdGlvbkJ1dHRvbnMsIHBsYXllclNldFVwRm9ybSB9IGZyb20gJy4vZG9tLWVsZW1lbnRzJztcbmltcG9ydCB7IGdhbWVEYXRhLCBpbml0aWFsaXplR2FtZSB9IGZyb20gJy4vZ2FtZSc7XG5pbXBvcnQgKiBhcyBzZXR0aW5ncyBmcm9tICcuL3NldHRpbmdzJztcbmltcG9ydCB7IG1vZGVTZWxlY3Rpb25WaWV3LCBwbGF5ZXJTZXRVcFZpZXcgfSBmcm9tICcuL3ZpZXdzJztcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBtb2RlU2VsZWN0aW9uVmlldyk7XG5cbmZ1bmN0aW9uIHN1Ym1pdE1vZGUoZSkge1xuICBpbml0aWFsaXplR2FtZSh7XG4gICAgcGxheWVyTW9kZTogTnVtYmVyKGUudGFyZ2V0LmNsb3Nlc3QoJ2J1dHRvbicpLmRhdGFzZXQubW9kZSksXG4gICAgZ2FtZWJvYXJkTGVuZ3RoOiBzZXR0aW5ncy5nYW1lYm9hcmRMZW5ndGgsXG4gICAgc2hpcExlbmd0aHM6IHNldHRpbmdzLnNoaXBMZW5ndGhzLFxuICB9KTtcbiAgcGxheWVyU2V0VXBWaWV3KGdhbWVEYXRhLm1vZGVzLnBsYXllck1vZGUpO1xufVxubW9kZVNlbGVjdGlvbkJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PlxuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzdWJtaXRNb2RlKVxuKTtcblxuZnVuY3Rpb24gc3VibWl0UGxheWVyU2V0VXAoZSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGNvbnN0IG5hbWVzID0gWy4uLmUudGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JyldLm1hcChcbiAgICAoaW5wdXQpID0+IGlucHV0LnZhbHVlXG4gICk7XG4gIGxldCBuYW1lSW5kZXggPSAwO1xuICBnYW1lRGF0YS5wbGF5ZXJzLmZvckVhY2goKHBsYXllcikgPT4ge1xuICAgIGlmIChwbGF5ZXIudHlwZSA9PT0gJ2h1bWFuUGxheWVyJykge1xuICAgICAgcGxheWVyLnNldE5hbWUobmFtZXNbbmFtZUluZGV4XSk7XG4gICAgICBuYW1lSW5kZXggKz0gMTtcbiAgICB9XG4gIH0pO1xuICBzdGFydEdhbWVib2FyZFNldFVwKCk7XG59XG5wbGF5ZXJTZXRVcEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0Jywgc3VibWl0UGxheWVyU2V0VXApO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FsbC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FsbC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwidmlld3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwibW9kZVNlbGVjdGlvblZpZXciLCJtb2RlU2VsZWN0aW9uQnV0dG9ucyIsInBsYXllclNldFVwVmlldyIsInBsYXllclNldFVwRm9ybSIsImdhbWVWaWV3IiwiZ2FtZU1lc3NhZ2UiLCJnYW1lQXJlYURpdnMiLCJnYW1lYm9hcmRMYWJlbERpdnMiLCJnYW1lYm9hcmREaXZzIiwiZ2FtZWJvYXJkU3F1YXJlRGl2cyIsInNoaXBzRGl2cyIsImhpZGVBbGxWaWV3cyIsInZpZXciLCJjbGFzc0xpc3QiLCJhZGQiLCJwbGF5ZXJOYW1lRmllbGRUZW1wbGF0ZSIsInBsYXllck1heEluZGV4Iiwic2hpcExlbmd0aHMiLCJzaG93Q2hhbmdlZFNoaXBPcmllbnRhdGlvbiIsInNoaXAiLCJkYXRhc2V0Iiwib3JpZW50YXRpb24iLCJOdW1iZXIiLCJncmlkVGVtcGxhdGUiLCJzcGxpdCIsInJldmVyc2UiLCJjb2xvcml6ZVNoaXBCb3JkZXIiLCJyb3ciLCJjb2wiLCJzaGlwTGVuZ3RoIiwiZ2FtZWJvYXJkSW5kZXgiLCJsZWdhbCIsImJvcmRlck9mZnNldHMiLCJvZmZzZXRzIiwicm93T2Zmc2V0IiwiY29sT2Zmc2V0IiwiZmlsdGVyIiwicG9zaXRpb24iLCJldmVyeSIsImNvb3JkIiwiZm9yRWFjaCIsImJvcmRlclJvdyIsImJvcmRlckNvbCIsInNxdWFyZUluZGV4IiwidW5jb2xvcml6ZVNoaXBCb3JkZXIiLCJzcXVhcmUiLCJjYXBpdGFsaXplIiwic3RyaW5nIiwidG9VcHBlckNhc2UiLCJzbGljZSIsImluY2x1ZGVzQXJyYXkiLCJhcnJheSIsIm5lc3RlZEFycmF5Iiwic29tZSIsImFycmF5SXRlbSIsIkxlbmd0aGFibGUiLCJTaW5rYWJsZSIsImhpdHMiLCJoaXRDb3VudCIsImhpdCIsImlzU3VuayIsIkNvbGxlY3Rpb25Nb3ZlYWJsZSIsImNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uSXRlbU5hbWUiLCJhcmVhTGVuZ3RoIiwiSW5maW5pdHkiLCJpdGVtQXJlYSIsImFyZWEiLCJjb29yZEluZGV4IiwiY29vcmRpbmF0ZSIsImxlZ2FsUGxhY2VtZW50IiwiY29sbGVjdGlvbkluZGV4IiwiYXJlYVBvc2l0aW9uIiwiZXhjbHVkaW5nIiwicmVkdWNlIiwicG9zaXRpb25zIiwiY29sbGVjdGlvbkl0ZW0iLCJpbmNsdWRlcyIsImNvbGxlY3Rpb25JdGVtQXJlYSIsImJvcmRlcmluZ0FyZWEiLCJib3JkZXJpbmdQb3NpdGlvbiIsImlsbGVnYWxQb3NpdGlvbnMiLCJwbGFjZSIsImNsYW1wZWRQb3NpdGlvbiIsIm1heGVzIiwiaXRlbU1heGVzIiwiTWF0aCIsIm1heCIsIm1pbiIsImNsYW1wVG9BcmVhIiwicm90YXRlIiwiZXJyb3IiLCJhc3NpZ24iLCJjYXBpdGFsaXplZENvbGxlY3Rpb25JdGVtIiwiZmxvb3IiLCJyYW5kb20iLCJBcnJheSIsIkNvbGxlY3Rpb25hYmxlIiwiY29sbGVjdGlvbkRhdGEiLCJjb2xsZWN0aW9uSXRlbUZhY3RvcnkiLCJtb3ZlYWJsZSIsImFsbE1ldGhvZE5hbWVzIiwiYWxsTWV0aG9kcyIsIm1ldGhvZHMiLCJtZXRob2QiLCJjYXBpdGFsaXplZE1ldGhvZCIsIk5hbWVhYmxlIiwibmFtZSIsInNldE5hbWUiLCJuZXdOYW1lIiwiQXR0YWNrYWJsZSIsImF0dGFja3MiLCJhdHRhY2tJdGVtTmFtZSIsInJlY2VpdmVBdHRhY2siLCJhdHRhY2tJdGVtcyIsImF0dGFja0l0ZW0iLCJzZW5kQXR0YWNrVG9JdGVtcyIsIkF1dG9BdHRhY2tpbmciLCJyYW5kb21BdHRhY2tQb3NpdGlvbiIsImF1dG9BdHRhY2siLCJhdHRhY2siLCJBdHRhY2tpbmciLCJhdXRvIiwiVHVyblRha2luZyIsInRha2VUdXJuIiwiU2hpcCIsInR5cGUiLCJIdW1hblBsYXllciIsImdhbWVEYXRhIiwibW9kZXMiLCJwbGF5ZXJNb2RlIiwicGxheWVycyIsImdhbWVib2FyZHMiLCJjdXJyUGxheWVySW5kZXgiLCJnYW1lT3ZlciIsImluaXRpYWxpemVHYW1lIiwiZ2FtZWJvYXJkTGVuZ3RoIiwiZ2FtZU1vZGVzIiwia2V5cyIsIm1vZGUiLCJpbml0aWFsaXplTW9kZXMiLCJodW1hblBsYXllckluZGV4IiwiaW5pdGlhbGl6ZVBsYXllcnMiLCJHYW1lYm9hcmQiLCJjb21wdXRlclBsYXllckluZGV4IiwiZmluZEluZGV4IiwicGxheWVyIiwiYXV0b1BsYWNlU2hpcHMiLCJpbml0aWFsaXplR2FtZWJvYXJkcyIsInN0YXJ0R2FtZWJvYXJkU2V0VXAiLCJuYW1lTGFiZWxzIiwibGFiZWxEaXYiLCJ0ZXh0Q29udGVudCIsInNxdWFyZUxlbmd0aCIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsImdhbWVib2FyZERpdiIsImRpc3BsYXkiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJkcmF3R2FtZWJvYXJkcyIsInNoaXBzRGl2IiwiZ2FtZUFyZWFJbmRleCIsInNoaXBJbmRleCIsInRlbXBsYXRlIiwic2hpcFRlbXBsYXRlIiwiZHJhd1NoaXBzIiwiZHJhd0dhbWVBcmVhcyIsImdhbWVib2FyZFNxdWFyZXMiLCJjbG9zZXN0IiwidXBkYXRlU2hpcFBvc2l0aW9uIiwic2hpcFBvc2l0aW9uIiwic2hpcHMiLCJmaW5kIiwidGFyZ2V0UG9zaXRpb24iLCJ0YXJnZXRHYW1lQXJlYUluZGV4IiwiYXJyYXkyIiwiZWxlbSIsInJvdGF0ZVNoaXAiLCJhdHRyaWJ1dGUiLCJzZXRUaW1lb3V0Iiwic2hvd0Vycm9yU2hpcE9yaWVudGF0aW9uIiwiZHJhZ2dlZFNoaXAiLCJhZGRFdmVudExpc3RlbmVyIiwicHJldmVudERlZmF1bHQiLCJkYXRhVHJhbnNmZXIiLCJkcm9wRWZmZWN0Iiwic2hpcE9yaWVudGF0aW9uIiwibGVnYWxTaGlwUGxhY2VtZW50IiwicGxhY2VTaGlwIiwiYWxsU2hpcHNQbGFjZWQiLCJjb25zb2xlIiwibG9nIiwic3F1YXJlQ2VudGVyIiwic2V0RHJhZ0ltYWdlIiwib3RoZXJTaGlwIiwiY29udGFpbnMiLCJlbmFibGVHYW1lYm9hcmREcmFnQW5kRHJvcCIsImJ1dHRvbiIsImVuYWJsZUdhbWVib2FyZFNldFVwRXZlbnRzIiwiZ2FtZWJvYXJkIiwiZ2FtZUFyZWEiLCJ1cGRhdGVHYW1lYm9hcmRTZXRVcCIsInN1Ym1pdE1vZGUiLCJuYW1lcyIsImlucHV0IiwidmFsdWUiLCJuYW1lSW5kZXgiXSwic291cmNlUm9vdCI6IiJ9