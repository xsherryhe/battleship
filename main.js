(()=>{"use strict";var e={689:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(537),r=t.n(a),o=t(645),i=t.n(o)()(r());i.push([e.id,"* {\n  box-sizing: border-box;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.game-areas {\n  display: flex;\n  gap: 2rem;\n}\n\n.gameboard {\n  display: grid;\n  width: max-content;\n  border: 0.1rem solid black;\n}\n\n.square {\n  border: 0.05rem solid black;\n  position: relative;\n}\n\n.ship { \n  display: grid;\n  z-index: 1;\n}\n\n.ships {\n  display: flex;\n  gap: 1rem;\n}\n\n.ship-square.full {\n  background-color: black;\n  grid-column: 1 / span 2;\n}\n\n.ship-square.top-left {\n  background-image: linear-gradient(to bottom right, transparent 50%, black 50%);\n  grid-column: 1;\n}\n\n.ship-square.top-right {\n  background-image: linear-gradient(to bottom left, transparent 50%, black 50%);\n  grid-column: 2;\n}\n\n.ship-square.bottom-left {\n  background-image: linear-gradient(to bottom left, black 50%, transparent 50%);\n  grid-column: 1;\n}\n\n.ship-square.bottom-right {\n  background-image: linear-gradient(to bottom right, black 50%, transparent 50%);\n  grid-column: 2;\n}\n\n.disabled * {\n  color: gray;\n  border-color: lightgray;\n}\n","",{version:3,sources:["webpack://./src/styles/all.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,0BAA0B;AAC5B;;AAEA;EACE,2BAA2B;EAC3B,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,uBAAuB;EACvB,uBAAuB;AACzB;;AAEA;EACE,8EAA8E;EAC9E,cAAc;AAChB;;AAEA;EACE,6EAA6E;EAC7E,cAAc;AAChB;;AAEA;EACE,6EAA6E;EAC7E,cAAc;AAChB;;AAEA;EACE,8EAA8E;EAC9E,cAAc;AAChB;;AAEA;EACE,WAAW;EACX,uBAAuB;AACzB",sourcesContent:["* {\n  box-sizing: border-box;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.game-areas {\n  display: flex;\n  gap: 2rem;\n}\n\n.gameboard {\n  display: grid;\n  width: max-content;\n  border: 0.1rem solid black;\n}\n\n.square {\n  border: 0.05rem solid black;\n  position: relative;\n}\n\n.ship { \n  display: grid;\n  z-index: 1;\n}\n\n.ships {\n  display: flex;\n  gap: 1rem;\n}\n\n.ship-square.full {\n  background-color: black;\n  grid-column: 1 / span 2;\n}\n\n.ship-square.top-left {\n  background-image: linear-gradient(to bottom right, transparent 50%, black 50%);\n  grid-column: 1;\n}\n\n.ship-square.top-right {\n  background-image: linear-gradient(to bottom left, transparent 50%, black 50%);\n  grid-column: 2;\n}\n\n.ship-square.bottom-left {\n  background-image: linear-gradient(to bottom left, black 50%, transparent 50%);\n  grid-column: 1;\n}\n\n.ship-square.bottom-right {\n  background-image: linear-gradient(to bottom right, black 50%, transparent 50%);\n  grid-column: 2;\n}\n\n.disabled * {\n  color: gray;\n  border-color: lightgray;\n}\n"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",a=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),a&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),a&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,a,r,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(a)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);a&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(r," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,a=0;a<n.length;a++)if(n[a].identifier===e){t=a;break}return t}function a(e,a){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],d=a.base?c[0]+a.base:c[0],l=o[d]||0,u="".concat(d," ").concat(l);o[d]=l+1;var p=t(u),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(m);else{var f=r(m,a);a.byIndex=s,n.splice(s,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var o=a(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=t(o[i]);n[s].references--}for(var c=a(e,r),d=0;d<o.length;d++){var l=t(o[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}o=c}}},569:e=>{var n={};e.exports=function(e,t){var a=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,r&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(a,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(a){var r=n[a];if(void 0!==r)return r.exports;var o=n[a]={id:a,exports:{}};return e[a](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{const e=document.querySelectorAll("main > section"),n=document.querySelector("section.mode-selection"),a=document.querySelectorAll(".mode-selection button"),r=document.querySelector("section.player-set-up"),o=document.querySelector("section.player-set-up form"),i=document.querySelector("section.game"),s=document.querySelector(".game .message"),c=document.querySelectorAll(".game .game-area"),d=document.querySelectorAll(".game .gameboard-label"),l=document.querySelectorAll(".game .gameboard"),u=document.querySelectorAll(".game .ships"),p=()=>document.querySelectorAll(".game .ship"),m=[5,4,3,3,2];function f(){e.forEach((e=>e.classList.add("hidden")))}function A(e,n){return`<div class="field">\n    <label for="player-${e}-name">Player${n?` ${e+1}`:""} Name</label>\n    <input type="text" name="player-${e}-name" id="player-${e}-name">\n  </div>`}function h(e){return e[0].toUpperCase()+e.slice(1)}function g(e,n){return n.some((n=>n.every(((n,t)=>n===e[t]))))}function y(e){return{length:e}}function b(e,n){let t=n;return{hit:function(){t+=1},isSunk:function(){return e===t}}}function v(e,n,t=1/0){function a(e=this.position){const t=[];if(void 0===e||void 0===this.orientation)return t;const a=this.orientation;for(let r=0;r<this[n].length;r+=1){const n=[...e];n[a]+=r,t.push(n)}return t}function r(a,r){const o=e[a],i=function(e,a){const r=[t-a[n].length,t-1],o=0===a.orientation?r:[...r].reverse();return e.map(((e,n)=>Math.max(0,Math.min(o[n],e))))}(r,o),s=o.area(i).some((n=>g(n,function({excluding:n}={}){return e.reduce(((e,t,a)=>{if(!t.position||n.includes(a))return e;const r=t.area();return[...e,...r,...(o=r,o.reduce(((e,[n,t])=>[...e,...[[1,0],[-1,0],[0,1],[0,-1],[1,1],[1,-1],[-1,1],[-1,1]].map((([e,a])=>[n+e,t+a])).filter((e=>!g(e,o)))]),[]))];var o}),[])}({excluding:[a]}))));if(s)throw new Error("This position is illegal!");o.position=i}function o(n){const t=e[n];t.orientation=1-t.orientation}e.forEach((e=>Object.assign(e,{orientation:0,area:a})));const i=h(n);return{[`place${i}`]:r,[`all${i}sPlaced`]:function(){return e.every((e=>e.position))},[`rotate${i}`]:o,[`autoPlace${i}s`]:function(){e.forEach(((e,n)=>{for(Math.floor(2*Math.random())&&o(n);!e.position;)try{r(n,[...new Array(2)].map((()=>Math.floor(Math.random()*t))))}catch{}}))}}}function E(e,n,t,{moveable:a=!1,allMethodNames:r=[]}={}){const o=e.map((e=>({[n]:t(e)}))),i=r.reduce(((e,t)=>{const a=h(t);return{...e,[`all${a}`]:function(){return o.every((e=>e[n][`is${a}`]()))}}}),{});return{[`${n}s`]:o,...i,...a?v(o,n,a.areaLength||1/0):{}}}function x(e){return{name:e,setName:function(e){this.name=e}}}function C(e,{attackItemName:n}={}){return{attacks:e,receiveAttack:function(t){e.push(t),n&&function(e,t){e.forEach((e=>{g(t,e.area())&&e[n].hit()}))}(this[`${n}s`],t)}}}function k(){function e(e){return[...new Array(2)].map((()=>Math.floor(Math.random()*e.length)))}return{autoAttack:function(n){let t=e(n);for(;g(t,n.attacks||[]);)t=e(n);this.attack(n,t)}}}function q({auto:e=!1}={}){return{attack:function(e,n){if(g(n,e.attacks||[]))throw new Error("That position has already been attacked!");e.receiveAttack(n)},...e?k():{}}}function S({method:e=""}={}){return{takeTurn:function(n){return!!e&&(this[e](n),!0)}}}function M({length:e=2,hits:n=0}={}){return{type:"Ship",...y(e),...b(e,n)}}function B(e="Player"){return{type:"humanPlayer",...x(e),...q(),...S()}}const L={modes:{playerMode:0},players:[],gameboards:[],currPlayerIndex:0,gameOver:!1};function $({playerMode:e=0,gameboardLength:n=10,shipLengths:t=[5,4,3,3,2]}={}){!function(e){const n={...e};Object.keys(n).forEach((e=>{n[e]=Number(n[e])})),L.modes=n}({playerMode:e}),function(){if(L.modes.playerMode)L.players=[...new Array(2)].map((()=>B()));else{L.players=[];const e=Math.floor(2*Math.random());L.players[e]=B(),L.players[1-e]={type:"computerPlayer",...x("Computer"),...q({auto:!0}),...S({method:"autoAttack"})}}}(),function(e,n){if(L.gameboards=[...new Array(2)].map((()=>function({shipLengths:e=[5,4,3,3,2],length:n=10,attacks:t=[]}={}){return{type:"Gameboard",...y(n),...E(e.map((e=>y(e))),"ship",M,{moveable:{areaLength:n},allMethodNames:["sunk"]}),...C(t,{attackItemName:"ship"})}}({length:e,shipLengths:n}))),L.modes.playerMode)return;const t=L.players.findIndex((e=>"computerPlayer"===e.type));L.gameboards[t].autoPlaceShips()}(n,t),L.currPlayerIndex=0,L.gameOver=!1}function w(){const e=[...document.querySelectorAll(".game .gameboard .square")].map((e=>({square:e,position:[Math.floor(e.dataset.index/10),e.dataset.index%10],gameAreaIndex:Number(e.closest(".game-area").dataset.index)})));e.forEach((({square:n,position:t,gameAreaIndex:a})=>{n.addEventListener("dragover",(function(e){e.preventDefault(),e.dataTransfer.dropEffect="move";const[n,t]=e.dataTransfer.getData("text/plain").split(",").map(Number);n===a&&m[t]})),n.addEventListener("drop",(function(n){const[r,o]=n.dataTransfer.getData("text/plain").split(",").map(Number);if(r===a){try{L.gameboards[a].placeShip(o,t)}catch{return}!function(n,t){const r=((e,n)=>document.querySelector(`.game .ship[data-game-area-index="${e}"][data-index="${n}"]`))(a,n);r.style.position="absolute",e.find((({position:e,gameAreaIndex:n})=>{return a===n&&(r=e,t.every(((e,n)=>r[n]===e)));var r})).square.appendChild(r)}(o,L.gameboards[a].ships[o].position)}}))})),p().forEach((e=>{e.addEventListener("dragstart",(function(n){n.dataTransfer.setData("text/plain",`${e.dataset.gameAreaIndex},${e.dataset.index}`);const t=Number(e.dataset.squareCenter);n.dataTransfer.setDragImage(e,t,t)})),e.addEventListener("dragover",(function(n){n.preventDefault(),n.dataTransfer.dropEffect="move",e.style.zIndex=0})),e.addEventListener("dragend",(function(){p().forEach((e=>{e.style.zIndex=1}))}))}))}function T(e){$({playerMode:Number(e.target.closest("button").dataset.mode),gameboardLength:10,shipLengths:m}),function(e){f(),r.classList.remove("hidden");for(let n=e;n>=0;n-=1)o.insertAdjacentHTML("afterBegin",A(n,e))}(L.modes.playerMode)}window.addEventListener("load",(function(){f(),n.classList.remove("hidden")})),a.forEach((e=>e.addEventListener("click",T))),o.addEventListener("submit",(function(e){e.preventDefault();const n=[...e.target.querySelectorAll("input")].map((e=>e.value));let t=0;L.players.forEach((e=>{"humanPlayer"===e.type&&(e.setName(n[t]),t+=1)})),f(),i.classList.remove("hidden"),function(e){d.forEach(((n,t)=>{n.textContent=`${e[t]}'s Shipyard`}));const n=Math.min(window.innerHeight,window.innerWidth)/22.5;!function(e,n){l.forEach((n=>{n.style.display="grid",n.style.gridTemplate=`repeat(10, ${e}px) / repeat(10, ${e}px)`;for(let e=0;e<100;e+=1)n.insertAdjacentHTML("beforeend",`<div class="square" data-index="${e}"></div>`)}))}(n),function(e){u.forEach(((n,t)=>{m.forEach(((a,r)=>{n.insertAdjacentHTML("beforeend",function(e,n,t,a){let r=`<div style="display: grid; grid-template: repeat(${n}, ${e}px) / repeat(2, ${e/2}px);" class="ship" data-game-area-index="${a}" data-index="${t}" data-square-center="${e/2}" draggable="true">`;for(let e=0;e<n;e+=1)0===e?(r+='<div class="ship-square top-left"></div>',r+='<div class="ship-square top-right"></div>'):e===n-1?(r+='<div class="ship-square bottom-left"></div>',r+='<div class="ship-square bottom-right"></div>'):r+='<div class="ship-square full"></div>';return r+="</div>",r}(e,a,r,t))}))}))}(n)}(L.players.map((e=>e.name))),w(),function(){const e=L.gameboards.findIndex((e=>!e.allShipsPlaced()));var n,t;t=e,c.forEach(((e,n)=>{const a=e.querySelectorAll(".ship");n!==t?(e.classList.add("disabled"),a.forEach((e=>e.classList.add("hidden")))):(e.classList.remove("disabled"),a.forEach((e=>e.classList.remove("hidden"))))})),n=L.players[e].name,s.textContent=`${n}, place your ships.`}()}));var I=t(379),N=t.n(I),P=t(795),j=t.n(P),O=t(569),z=t.n(O),D=t(565),U=t.n(D),R=t(216),H=t.n(R),Z=t(589),W=t.n(Z),X=t(689),F={};F.styleTagTransform=W(),F.setAttributes=U(),F.insert=z().bind(null,"head"),F.domAPI=j(),F.insertStyleElement=H(),N()(X.Z,F),X.Z&&X.Z.locals&&X.Z.locals})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,