(()=>{"use strict";var n={689:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,'* {\n  box-sizing: border-box;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.game-areas {\n  display: flex;\n  gap: 2rem;\n}\n\n.gameboard {\n  display: grid;\n  width: max-content;\n  border: 0.1rem solid black;\n  background-color: white;\n}\n\n.square {\n  border: 0.05rem solid black;\n  position: relative;\n}\n\n.square.with-background-ship {\n  transform-style: preserve-3d;\n}\n\n.square.with-background-ship .ship {\n  transform: translateZ(-1px);\n}\n\n.square.hit {\n  color: red;\n}\n\n.square.miss {\n  color: black;\n}\n\n.square.legal-border {\n  background-color: green;\n}\n\n.square.error-border {\n  background-color: rgba(255, 0, 0, 0.5);\n}\n\n.ships {\n  display: grid;\n  justify-content: center;\n  grid-template-columns: repeat(3, max-content);\n  align-items: center;\n  gap: 1rem;\n}\n\n.ship {\n  position: relative;\n  grid-column-end: span 1;\n  display: grid;\n  z-index: 1;\n}\n\n.ship.on-gameboard {\n  position: absolute;\n}\n\n.ship-square.full {\n  background-color: black;\n}\n\n.ship[data-orientation="0"] .ship-square.full {\n  grid-column: 1 / span 2;\n}\n\n.ship[data-orientation="1"] .ship-square.full {\n  grid-row: 1 / span 2;\n}\n\n.ship-square.top-left {\n  background-image: linear-gradient(to bottom right, transparent 50%, black 50%);\n  grid-column: 1;\n}\n\n.ship[data-orientation="1"] .ship-square.top-left {\n  grid-row: 1;\n}\n\n.ship-square.top-right {\n  background-image: linear-gradient(to bottom left, transparent 50%, black 50%);\n  grid-column: 2;\n}\n\n.ship[data-orientation="1"] .ship-square.top-right {\n  grid-column: -2;\n  grid-row: 1;\n}\n\n.ship-square.bottom-left {\n  background-image: linear-gradient(to bottom left, black 50%, transparent 50%);\n  grid-column: 1;\n}\n\n.ship[data-orientation="1"] .ship-square.bottom-left {\n  grid-row: 2;\n}\n\n.ship-square.bottom-right {\n  background-image: linear-gradient(to bottom right, black 50%, transparent 50%);\n  grid-column: 2;\n}\n\n.ship[data-orientation="1"] .ship-square.bottom-right {\n  grid-column: -2;\n  grid-row: 2;\n}\n\n.ship button.rotate {\n  grid-row: 1;\n  grid-column: 3 / span 2;\n  justify-self: center;\n  align-self: center;\n}\n\n.ship[data-orientation="1"] button.rotate {\n  grid-row: 3 / span 2;\n  grid-column: 1;\n}\n\n.disabled * {\n  border-color: lightgray;\n}\n\n.disabled .gameboard-label {\n  color: gray;\n}\n\n.disabled .ship-square.full {\n  background-color: gray;\n}\n\n.disabled .ship-square.top-left {\n  background-image: linear-gradient(to bottom right, transparent 50%, gray 50%);\n}\n\n.disabled .ship-square.top-right {\n  background-image: linear-gradient(to bottom left, transparent 50%, gray 50%);\n}\n\n.disabled .ship-square.bottom-left {\n  background-image: linear-gradient(to bottom left, gray 50%, transparent 50%);\n}\n\n.disabled .ship-square.bottom-right {\n  background-image: linear-gradient(to bottom right, gray 50%, transparent 50%);\n}\n',"",{version:3,sources:["webpack://./src/styles/all.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,0BAA0B;EAC1B,uBAAuB;AACzB;;AAEA;EACE,2BAA2B;EAC3B,kBAAkB;AACpB;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,sCAAsC;AACxC;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,6CAA6C;EAC7C,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;EACvB,aAAa;EACb,UAAU;AACZ;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,8EAA8E;EAC9E,cAAc;AAChB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,6EAA6E;EAC7E,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,WAAW;AACb;;AAEA;EACE,6EAA6E;EAC7E,cAAc;AAChB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,8EAA8E;EAC9E,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,WAAW;AACb;;AAEA;EACE,WAAW;EACX,uBAAuB;EACvB,oBAAoB;EACpB,kBAAkB;AACpB;;AAEA;EACE,oBAAoB;EACpB,cAAc;AAChB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,6EAA6E;AAC/E;;AAEA;EACE,4EAA4E;AAC9E;;AAEA;EACE,4EAA4E;AAC9E;;AAEA;EACE,6EAA6E;AAC/E",sourcesContent:['* {\n  box-sizing: border-box;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.game-areas {\n  display: flex;\n  gap: 2rem;\n}\n\n.gameboard {\n  display: grid;\n  width: max-content;\n  border: 0.1rem solid black;\n  background-color: white;\n}\n\n.square {\n  border: 0.05rem solid black;\n  position: relative;\n}\n\n.square.with-background-ship {\n  transform-style: preserve-3d;\n}\n\n.square.with-background-ship .ship {\n  transform: translateZ(-1px);\n}\n\n.square.hit {\n  color: red;\n}\n\n.square.miss {\n  color: black;\n}\n\n.square.legal-border {\n  background-color: green;\n}\n\n.square.error-border {\n  background-color: rgba(255, 0, 0, 0.5);\n}\n\n.ships {\n  display: grid;\n  justify-content: center;\n  grid-template-columns: repeat(3, max-content);\n  align-items: center;\n  gap: 1rem;\n}\n\n.ship {\n  position: relative;\n  grid-column-end: span 1;\n  display: grid;\n  z-index: 1;\n}\n\n.ship.on-gameboard {\n  position: absolute;\n}\n\n.ship-square.full {\n  background-color: black;\n}\n\n.ship[data-orientation="0"] .ship-square.full {\n  grid-column: 1 / span 2;\n}\n\n.ship[data-orientation="1"] .ship-square.full {\n  grid-row: 1 / span 2;\n}\n\n.ship-square.top-left {\n  background-image: linear-gradient(to bottom right, transparent 50%, black 50%);\n  grid-column: 1;\n}\n\n.ship[data-orientation="1"] .ship-square.top-left {\n  grid-row: 1;\n}\n\n.ship-square.top-right {\n  background-image: linear-gradient(to bottom left, transparent 50%, black 50%);\n  grid-column: 2;\n}\n\n.ship[data-orientation="1"] .ship-square.top-right {\n  grid-column: -2;\n  grid-row: 1;\n}\n\n.ship-square.bottom-left {\n  background-image: linear-gradient(to bottom left, black 50%, transparent 50%);\n  grid-column: 1;\n}\n\n.ship[data-orientation="1"] .ship-square.bottom-left {\n  grid-row: 2;\n}\n\n.ship-square.bottom-right {\n  background-image: linear-gradient(to bottom right, black 50%, transparent 50%);\n  grid-column: 2;\n}\n\n.ship[data-orientation="1"] .ship-square.bottom-right {\n  grid-column: -2;\n  grid-row: 2;\n}\n\n.ship button.rotate {\n  grid-row: 1;\n  grid-column: 3 / span 2;\n  justify-self: center;\n  align-self: center;\n}\n\n.ship[data-orientation="1"] button.rotate {\n  grid-row: 3 / span 2;\n  grid-column: 1;\n}\n\n.disabled * {\n  border-color: lightgray;\n}\n\n.disabled .gameboard-label {\n  color: gray;\n}\n\n.disabled .ship-square.full {\n  background-color: gray;\n}\n\n.disabled .ship-square.top-left {\n  background-image: linear-gradient(to bottom right, transparent 50%, gray 50%);\n}\n\n.disabled .ship-square.top-right {\n  background-image: linear-gradient(to bottom left, transparent 50%, gray 50%);\n}\n\n.disabled .ship-square.bottom-left {\n  background-image: linear-gradient(to bottom left, gray 50%, transparent 50%);\n}\n\n.disabled .ship-square.bottom-right {\n  background-image: linear-gradient(to bottom right, gray 50%, transparent 50%);\n}\n'],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var c=n[s],d=r.base?c[0]+r.base:c[0],l=o[d]||0,u="".concat(d," ").concat(l);o[d]=l+1;var A=t(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var m=a(p,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=t(o[i]);e[s].references--}for(var c=r(n,a),d=0;d<o.length;d++){var l=t(o[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{const n=document.querySelectorAll("main > section"),e=document.querySelector("section.mode-selection"),r=document.querySelectorAll(".mode-selection button"),a=document.querySelector("section.player-set-up"),o=document.querySelector("section.player-set-up form"),i=document.querySelector("section.game"),s=document.querySelector(".game .message"),c=document.querySelectorAll(".game .game-area"),d=document.querySelectorAll(".game .gameboard-label"),l=document.querySelectorAll(".game .gameboard"),u=()=>document.querySelectorAll(".game .gameboard .square"),A=document.querySelectorAll(".game .ships"),p=()=>document.querySelectorAll(".game .ship"),m=()=>document.querySelectorAll(".ship button.rotate"),g=document.querySelector("button.update-gameboard-set-up"),h=document.querySelector("button.start-game"),f=document.querySelector("section.pass-device"),b=document.querySelector(".pass-device button.pass-device-continue");function E(){n.forEach((n=>n.classList.add("hidden")))}function y(n,e){return`<div class="field">\n    <label for="player-${n}-name">Player${e?` ${n+1}`:""} Name</label>\n    <input type="text" name="player-${n}-name" id="player-${n}-name">\n  </div>`}function v(){E(),i.classList.remove("hidden")}function C(n){s.textContent=n}function k(n,e=!1){c.forEach(((t,r)=>{const a=t.querySelectorAll(".ship");r!==n?(t.classList.add("disabled"),a.forEach((n=>{e?n.classList.add("hidden"):n.classList.remove("hidden")}))):(t.classList.remove("disabled"),a.forEach((n=>{e?n.classList.remove("hidden"):n.classList.add("hidden")})))}))}function q(n,e){n.classList.contains("attacked")||(n.classList.add(e?"hit":"miss","attacked"),n.insertAdjacentHTML("beforeend",`<p class="marker">${e?"X":"O"}</p>`))}const B=[5,4,3,3,2];function x(n){n.dataset.orientation=1-Number(n.dataset.orientation),n.style.gridTemplate=n.style.gridTemplate.split(" / ").reverse().join(" / ")}function L([n,e],t,r,a,o){const i=[[-1,0],[r,0]];for(let n=-1;n<=r;n+=1)i.push([n,-1],[n,1]);i.map((r=>{const[a,o]=t?r.reverse():r;return[n+a,e+o]})).filter((n=>n.every((n=>n>=0&&n<10)))).forEach((([n,e])=>{const t=10*n+e;l[a].querySelector(`.square[data-index="${t}"]`).classList.add((o?"legal":"error")+"-border")}))}function w(){u().forEach((n=>{n.classList.remove("legal-border","error-border")}))}function S(n){return n[0].toUpperCase()+n.slice(1)}function M(n,e){return e.some((e=>e.every(((e,t)=>e===n[t]))))}function I(n){return{length:n}}function $(n,e){let t=e;return{hit:function(){t+=1},isSunk:function(){return n===t}}}function N(n,e,t=1/0){function r(n=this.position){const t=[];if(void 0===n||void 0===this.orientation)return t;const r=this.orientation;for(let a=0;a<this[e].length;a+=1){const e=[...n];e[r]+=a,t.push(e)}return t}function a(e,t){return n[e].area(t).every((t=>!M(t,function({excluding:e}={}){return n.reduce(((n,t,r)=>{if(!t.position||e.includes(r))return n;const a=t.area();return[...n,...a,...(o=a,o.reduce(((n,[e,t])=>[...n,...[[1,0],[-1,0],[0,1],[0,-1],[1,1],[1,-1],[-1,1],[-1,1]].map((([n,r])=>[e+n,t+r])).filter((n=>!M(n,o)))]),[]))];var o}),[])}({excluding:[e]}))))}function o(r,o){const i=n[r],s=function(n,r){const a=[t-r[e].length,t-1],o=0===r.orientation?a:[...a].reverse();return n.map(((n,e)=>Math.max(0,Math.min(o[e],n))))}(o,i);if(!a(r,s))throw new Error("This position is illegal!");return i.position=s,i.position}function i(e){const t=n[e];if(t.orientation=1-t.orientation,t.position)try{o(e,t.position)}catch(n){throw i(e),n}return t.orientation}n.forEach((n=>Object.assign(n,{orientation:0,area:r})));const s=S(e);return{[`place${s}`]:o,[`legal${s}Placement`]:a,[`all${s}sPlaced`]:function(){return n.every((n=>n.position))},[`rotate${s}`]:i,[`autoPlace${s}s`]:function(){n.forEach(((n,e)=>{for(Math.floor(2*Math.random())&&i(e);!n.position;)try{o(e,[...new Array(2)].map((()=>Math.floor(Math.random()*t))))}catch{}}))}}}function P(n,e,t,{moveable:r=!1,allMethodNames:a=[]}={}){const o=n.map((n=>({[e]:t(n)}))),i=a.reduce(((n,t)=>{const r=S(t);return{...n,[`all${r}`]:function(){return o.every((n=>n[e][`is${r}`]()))}}}),{});return{[`${e}s`]:o,...i,...r?N(o,e,r.areaLength||1/0):{}}}function T(n){return{name:n,setName:function(n){this.name=n}}}function j(n,{attackItemName:e}={}){return{attacks:n,receiveAttack:function(t){let r=!0;return e&&(r=function(n,t){for(let r=0;r<n.length;r+=1){const a=n[r];if(M(t,a.area()))return a[e].hit(),!0}return!1}(this[`${e}s`],t)),n.push({position:t,hit:r}),r}}}function O({auto:n=!1}={}){function e(n,e){return M(e,(n.attacks||[]).map((n=>n.position)))}return{attack:function(n,t){if(e(n,t))throw new Error("That position has already been attacked!");return n.receiveAttack(t)},...n?function(){function n(n){return[...new Array(2)].map((()=>Math.floor(Math.random()*n.length)))}return{autoAttack:function(t){let r=n(t);for(;e(t,r);)r=n(t);return this.attack(t,r)}}}():{}}}function W({method:n=null}={}){return{takeTurn:function(e){return!!n&&(this[n](e),!0)}}}function U({length:n=2,hits:e=0}={}){return{type:"Ship",...I(n),...$(n,e)}}function z(n="Player"){return{type:"humanPlayer",...T(n),...O(),...W()}}const Z={modes:{playerMode:0},players:[],gameboards:[],currPlayerIndex:0,gameOver:!1};function R({playerMode:n=0,gameboardLength:e=10,shipLengths:t=[5,4,3,3,2]}={}){!function(n){const e={...n};Object.keys(e).forEach((n=>{e[n]=Number(e[n])})),Z.modes=e}({playerMode:n}),function(){if(1===Z.modes.playerMode)Z.players=[...new Array(2)].map((()=>z()));else{Z.players=[];const n=Math.floor(2*Math.random());Z.players[n]=z(),Z.players[1-n]={type:"computerPlayer",...T("Computer"),...O({auto:!0}),...W({method:"autoAttack"})}}}(),function(n,e){Z.gameboards=[...new Array(2)].map((()=>function({shipLengths:n=[5,4,3,3,2],length:e=10,attacks:t=[]}={}){return{type:"Gameboard",...I(e),...P(n.map((n=>I(n))),"ship",U,{moveable:{areaLength:e},allMethodNames:["sunk"]}),...j(t,{attackItemName:"ship"})}}({length:n,shipLengths:e}))),Z.gameboards[H()]?.autoPlaceShips()}(e,t),Z.currPlayerIndex=0,Z.gameOver=!1}function H(){return Z.players.findIndex((n=>"computerPlayer"===n.type))}function D(){return Z.gameboards[1-Z.currPlayerIndex]}function X(){return Z.players[Z.currPlayerIndex]}function F(){const{attacks:n}=D();return n?.[n.length-1]&&!n[n.length-1].hit}function G(n=!1){let e=n;for(;!Z.gameOver&&(e||=X().takeTurn(D()),e);)Z.gameOver=Z.gameboards.some((n=>n.allSunk())),F()&&(Z.currPlayerIndex=1-Z.currPlayerIndex),e=!1}const J=[];function Y(n,e){return J.find((({position:t,gameAreaIndex:r})=>{return n===r&&(a=t,e.every(((n,e)=>a[e]===n)));var a})).square}function _(){g.classList.add("hidden");const n=Z.gameboards.findIndex((n=>!n.allShipsPlaced()));if(n<0)return c.forEach((n=>n.classList.add("disabled"))),p().forEach((n=>{n.classList.add("hidden");const e=n.closest(".square");e&&e.classList.add("with-background-ship"),n.draggable=!1})),m().forEach((n=>n.classList.add("hidden"))),C("Click the Start button to begin the game!"),void h.classList.remove("hidden");k(n,!0),C(`${Z.players[n].name}, place your ships.`)}function K(){v(),function(n){d.forEach(((e,t)=>{e.textContent=`${n[t]}'s Shipyard`}));const e=Math.min(window.innerHeight,window.innerWidth)/22.5;!function(n,e){l.forEach((e=>{e.style.display="grid",e.style.gridTemplate=`repeat(10, ${n}px) / repeat(10, ${n}px)`;for(let n=0;n<100;n+=1)e.insertAdjacentHTML("beforeend",`<div class="square" data-index="${n}"></div>`)}))}(e),function(n){A.forEach(((e,t)=>{B.forEach(((r,a)=>{e.insertAdjacentHTML("beforeend",function(n,e,t,r){let a=`<div style="display: grid; grid-template: repeat(${e}, ${n}px) / repeat(4, ${n/2}px);" class="ship" data-game-area-index="${r}" data-index="${t}" data-square-length="${n}" data-orientation="0" draggable="true">`;for(let n=0;n<e;n+=1)0===n?(a+='<div class="ship-square top-left"></div>',a+='<div class="ship-square top-right"></div>'):n===e-1?(a+='<div class="ship-square bottom-left"></div>',a+='<div class="ship-square bottom-right"></div>'):a+='<div class="ship-square full"></div>';return a+='<button class="rotate">R</button></div>',a}(n,r,a,t))}))}))}(e)}(Z.players.map((n=>n.name))),[...u()].forEach(((n,e)=>{J[e]={square:n,position:[Math.floor(n.dataset.index/10),n.dataset.index%10],gameAreaIndex:Number(n.closest(".game-area").dataset.index)}})),function(){function n(n,e=Number(n.dataset.gameAreaIndex),t=Z.gameboards[e].ships[Number(n.dataset.index)].position){n.classList.add("on-gameboard"),Y(e,t).appendChild(n)}function e(e){const t=e.target.closest(".ship"),[r,a]=["gameAreaIndex","index"].map((n=>Number(t.dataset[n]))),o=Z.gameboards[r].ships[a].position;try{Z.gameboards[r].rotateShip(a)}catch{return void function(n,e){x(n),L(e,Number(n.dataset.orientation),B[Number(n.dataset.index)],Number(n.dataset.gameAreaIndex),!1),setTimeout((()=>{x(n),w()}),500)}(t,o)}o&&n(t),x(t)}!function(){let e;J.forEach((({square:t,position:r,gameAreaIndex:a})=>{t.addEventListener("dragover",(function(n){if(n.preventDefault(),n.dataTransfer.dropEffect="move",Number(e.dataset.gameAreaIndex)!==a)return;const t=Number(e.dataset.index),o=Number(e.dataset.orientation),i=Z.gameboards[a].legalShipPlacement(t,r);L(r,o,B[t],a,i)})),t.addEventListener("dragleave",w),t.addEventListener("drop",(function(){if(Number(e.dataset.gameAreaIndex)!==a)return;const t=Number(e.dataset.index);try{Z.gameboards[a].placeShip(t,r)}catch{return}n(e),Z.gameboards[a].allShipsPlaced()&&g.classList.remove("hidden")}))}));const t=p();t.forEach((n=>{n.addEventListener("drag",(function(){n.classList.add("hidden")})),n.addEventListener("dragstart",(function(r){e=n;const a=Number(n.dataset.squareLength)/2;r.dataTransfer.setDragImage(n,a,a),t.forEach((e=>{e!==n&&e.classList.contains("on-gameboard")&&e.closest(".square").classList.add("with-background-ship")}))})),n.addEventListener("dragend",(function(){n.classList.remove("hidden"),w(),t.forEach((n=>{n.closest(".square")?.classList?.remove("with-background-ship")}))}))}))}(),m().forEach((n=>n.addEventListener("click",e)))}(),_()}function Q(n){R({playerMode:Number(n.target.closest("button").dataset.mode),gameboardLength:10,shipLengths:B}),function(n){E(),a.classList.remove("hidden");for(let e=n;e>=0;e-=1)o.insertAdjacentHTML("afterBegin",y(e,n))}(Z.modes.playerMode)}function V(n=0){const e=1-H();setTimeout((()=>{const t=Z.gameboards[e].attacks;for(let r=n;r<t.length;r+=1){const n=t[r],a=Y(e,n.position);if(!a.classList.contains("attacked")){q(a,n.hit),r+=1,r===t.length?en(!1):V(r);break}}}),1e3)}function nn(n=!0){Z.gameOver&&("computerPlayer"!==X().type||!n)&&(C(`Game over! ${X().name} wins.`),c.forEach((n=>n.classList.add("disabled"))))}function en(n=!0){const e=F()&&n&&Z.players[H()]||X(),t="computerPlayer"===e.type;C(`${e.name}'s turn...`),k(1-Z.players.indexOf(e),t),D().attacks.forEach((n=>{q(Y(1-Z.currPlayerIndex,n.position),n.hit)})),t&&V(),nn(n)}g.addEventListener("click",_),window.addEventListener("load",(function(){E(),e.classList.remove("hidden")})),r.forEach((n=>n.addEventListener("click",Q))),o.addEventListener("submit",(function(n){n.preventDefault();const e=[...n.target.querySelectorAll("input")].map((n=>n.value));let t=0;Z.players.forEach((n=>{"humanPlayer"===n.type&&(n.setName(e[t]),t+=1)})),K()})),b.addEventListener("click",v),h.addEventListener("click",(function(){h.classList.add("hidden"),J.forEach((({square:n,position:e,gameAreaIndex:t})=>{n.addEventListener("click",(function(){Z.gameOver||c[t].classList.contains("disabled")||t===1-Z.currPlayerIndex&&(X().attack(D(),e),en(),1===Z.modes.playerMode&&F()&&setTimeout((()=>{E(),f.classList.remove("hidden"),en()}),1e3),G(!0),nn())}))})),en(),G()}));var tn=t(379),rn=t.n(tn),an=t(795),on=t.n(an),sn=t(569),cn=t.n(sn),dn=t(565),ln=t.n(dn),un=t(216),An=t.n(un),pn=t(589),mn=t.n(pn),gn=t(689),hn={};hn.styleTagTransform=mn(),hn.setAttributes=ln(),hn.insert=cn().bind(null,"head"),hn.domAPI=on(),hn.insertStyleElement=An(),rn()(gn.Z,hn),gn.Z&&gn.Z.locals&&gn.Z.locals})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,